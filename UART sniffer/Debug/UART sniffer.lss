
UART sniffer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000073c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000011d  00800100  00800100  0000073c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000073c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000076c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  000007b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001348  00000000  00000000  000008a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aed  00000000  00000000  00001be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008f7  00000000  00000000  000026d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000025c  00000000  00000000  00002fcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ba  00000000  00000000  00003228  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007c8  00000000  00000000  000038e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000040aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	da c2       	rjmp	.+1460   	; 0x606 <__vector_20>
  52:	00 00       	nop
  54:	0a c2       	rjmp	.+1044   	; 0x46a <__vector_21>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	e8 c1       	rjmp	.+976    	; 0x442 <__vector_28>
  72:	00 00       	nop
  74:	f0 c1       	rjmp	.+992    	; 0x456 <__vector_29>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	22 e0       	ldi	r18, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	ad 31       	cpi	r26, 0x1D	; 29
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	35 d1       	rcall	.+618    	; 0x314 <main>
  aa:	0c c3       	rjmp	.+1560   	; 0x6c4 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <save_eeprom_data>:
volatile long data_addr;



void save_eeprom_data()
{
  ae:	cf 92       	push	r12
  b0:	df 92       	push	r13
  b2:	ef 92       	push	r14
  b4:	ff 92       	push	r15
  b6:	0f 93       	push	r16
  b8:	1f 93       	push	r17
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
  c2:	a0 97       	sbiw	r28, 0x20	; 32
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	f8 94       	cli
  c8:	de bf       	out	0x3e, r29	; 62
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	cd bf       	out	0x3d, r28	; 61
	if (data_addr == 0)
  ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  d6:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
  da:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
  de:	89 2b       	or	r24, r25
  e0:	8a 2b       	or	r24, r26
  e2:	8b 2b       	or	r24, r27
  e4:	09 f0       	breq	.+2      	; 0xe8 <save_eeprom_data+0x3a>
  e6:	40 c0       	rjmp	.+128    	; 0x168 <save_eeprom_data+0xba>
	{
		// write data length
		unsigned char data[32];
		int len;
		
		len = uart_return_RX_buf(data);				
  e8:	ce 01       	movw	r24, r28
  ea:	01 96       	adiw	r24, 0x01	; 1
  ec:	be d2       	rcall	.+1404   	; 0x66a <uart_return_RX_buf>
  ee:	7c 01       	movw	r14, r24
		data_addr = len;		
  f0:	09 2e       	mov	r0, r25
  f2:	00 0c       	add	r0, r0
  f4:	aa 0b       	sbc	r26, r26
  f6:	bb 0b       	sbc	r27, r27
  f8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  fc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 100:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 104:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
						
		// Zero length of the buff
		uart_set_RX_buf_len();
 108:	ab d2       	rcall	.+1366   	; 0x660 <uart_set_RX_buf_len>
		
		// Saves length of the data		
		eeprom_write_byte((uint8_t*)0, data_addr >> 8);
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 10e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 112:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 116:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 11a:	69 2f       	mov	r22, r25
 11c:	7a 2f       	mov	r23, r26
 11e:	8b 2f       	mov	r24, r27
 120:	99 27       	eor	r25, r25
 122:	87 fd       	sbrc	r24, 7
 124:	9a 95       	dec	r25
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	be d2       	rcall	.+1404   	; 0x6a8 <eeprom_write_byte>
		eeprom_write_byte((uint8_t*)1, data_addr	   );
 12c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 130:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 134:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 138:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	b3 d2       	rcall	.+1382   	; 0x6a8 <eeprom_write_byte>
		
		//DEBUG
		//UART_AddToQueue(data, len);
		
		// Add data to the eeprom
		for (int i=0; i < len; i++)
 142:	00 e0       	ldi	r16, 0x00	; 0
 144:	10 e0       	ldi	r17, 0x00	; 0
 146:	0c c0       	rjmp	.+24     	; 0x160 <save_eeprom_data+0xb2>
		{
			eeprom_write_byte((uint8_t*) (2+i), data[i]);
 148:	e1 e0       	ldi	r30, 0x01	; 1
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	ec 0f       	add	r30, r28
 14e:	fd 1f       	adc	r31, r29
 150:	e0 0f       	add	r30, r16
 152:	f1 1f       	adc	r31, r17
 154:	60 81       	ld	r22, Z
 156:	c8 01       	movw	r24, r16
 158:	02 96       	adiw	r24, 0x02	; 2
 15a:	a6 d2       	rcall	.+1356   	; 0x6a8 <eeprom_write_byte>
		
		//DEBUG
		//UART_AddToQueue(data, len);
		
		// Add data to the eeprom
		for (int i=0; i < len; i++)
 15c:	0f 5f       	subi	r16, 0xFF	; 255
 15e:	1f 4f       	sbci	r17, 0xFF	; 255
 160:	0e 15       	cp	r16, r14
 162:	1f 05       	cpc	r17, r15
 164:	8c f3       	brlt	.-30     	; 0x148 <save_eeprom_data+0x9a>
		// I need only to re-write it 
		
		unsigned int offset;
		
		// Read length of previous data
		offset      = eeprom_read_byte((uint8_t*)0);
 166:	4d c0       	rjmp	.+154    	; 0x202 <save_eeprom_data+0x154>
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	95 d2       	rcall	.+1322   	; 0x698 <eeprom_read_byte>
 16e:	e8 2e       	mov	r14, r24
		offset      = offset << 8;
 170:	f1 2c       	mov	r15, r1
 172:	fe 2c       	mov	r15, r14
		offset	    = offset + eeprom_read_byte((uint8_t*)1);
 174:	ee 24       	eor	r14, r14
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	8e d2       	rcall	.+1308   	; 0x698 <eeprom_read_byte>
 17c:	e8 0e       	add	r14, r24
		
		unsigned char data[32];
		int len;
		
		len         = uart_return_RX_buf(data);
 17e:	f1 1c       	adc	r15, r1
 180:	ce 01       	movw	r24, r28
 182:	01 96       	adiw	r24, 0x01	; 1
 184:	72 d2       	rcall	.+1252   	; 0x66a <uart_return_RX_buf>
 186:	6c 01       	movw	r12, r24
		data_addr   = offset + len;
 188:	8e 0d       	add	r24, r14
 18a:	9f 1d       	adc	r25, r15
 18c:	a0 e0       	ldi	r26, 0x00	; 0
 18e:	b0 e0       	ldi	r27, 0x00	; 0
 190:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 194:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 198:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 19c:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
		
		// Zero length of the buff
		uart_set_RX_buf_len();
 1a0:	5f d2       	rcall	.+1214   	; 0x660 <uart_set_RX_buf_len>
		
		// Set new length of the data
		eeprom_write_byte((uint8_t*)0, data_addr >> 8);
 1a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1aa:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1ae:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1b2:	69 2f       	mov	r22, r25
 1b4:	7a 2f       	mov	r23, r26
 1b6:	8b 2f       	mov	r24, r27
 1b8:	99 27       	eor	r25, r25
 1ba:	87 fd       	sbrc	r24, 7
 1bc:	9a 95       	dec	r25
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	72 d2       	rcall	.+1252   	; 0x6a8 <eeprom_write_byte>
		eeprom_write_byte((uint8_t*)1, data_addr	   );
 1c4:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1c8:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1cc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1d0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	67 d2       	rcall	.+1230   	; 0x6a8 <eeprom_write_byte>
		
		// DEBUG
		//UART_AddToQueue(buf, temp_len);
				
		for (int i=0; i < len; i++)
 1da:	00 e0       	ldi	r16, 0x00	; 0
 1dc:	10 e0       	ldi	r17, 0x00	; 0
 1de:	0e c0       	rjmp	.+28     	; 0x1fc <save_eeprom_data+0x14e>
		{
			eeprom_write_byte((uint8_t*) (2+i+offset), data[i]);
 1e0:	c8 01       	movw	r24, r16
 1e2:	8e 0d       	add	r24, r14
 1e4:	9f 1d       	adc	r25, r15
 1e6:	e1 e0       	ldi	r30, 0x01	; 1
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	ec 0f       	add	r30, r28
 1ec:	fd 1f       	adc	r31, r29
 1ee:	e0 0f       	add	r30, r16
 1f0:	f1 1f       	adc	r31, r17
 1f2:	60 81       	ld	r22, Z
 1f4:	02 96       	adiw	r24, 0x02	; 2
 1f6:	58 d2       	rcall	.+1200   	; 0x6a8 <eeprom_write_byte>
		eeprom_write_byte((uint8_t*)1, data_addr	   );
		
		// DEBUG
		//UART_AddToQueue(buf, temp_len);
				
		for (int i=0; i < len; i++)
 1f8:	0f 5f       	subi	r16, 0xFF	; 255
 1fa:	1f 4f       	sbci	r17, 0xFF	; 255
 1fc:	0c 15       	cp	r16, r12
 1fe:	1d 05       	cpc	r17, r13
 200:	7c f3       	brlt	.-34     	; 0x1e0 <save_eeprom_data+0x132>
		{
			eeprom_write_byte((uint8_t*) (2+i+offset), data[i]);
		}
	}
}
 202:	a0 96       	adiw	r28, 0x20	; 32
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	f8 94       	cli
 208:	de bf       	out	0x3e, r29	; 62
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	cd bf       	out	0x3d, r28	; 61
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	1f 91       	pop	r17
 214:	0f 91       	pop	r16
 216:	ff 90       	pop	r15
 218:	ef 90       	pop	r14
 21a:	df 90       	pop	r13
 21c:	cf 90       	pop	r12
 21e:	08 95       	ret

00000220 <send_eeprom_data>:


void send_eeprom_data()
{
 220:	8f 92       	push	r8
 222:	9f 92       	push	r9
 224:	af 92       	push	r10
 226:	bf 92       	push	r11
 228:	ef 92       	push	r14
 22a:	ff 92       	push	r15
 22c:	0f 93       	push	r16
 22e:	1f 93       	push	r17
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	cd b7       	in	r28, 0x3d	; 61
 236:	de b7       	in	r29, 0x3e	; 62
 238:	a0 97       	sbiw	r28, 0x20	; 32
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	f8 94       	cli
 23e:	de bf       	out	0x3e, r29	; 62
 240:	0f be       	out	0x3f, r0	; 63
 242:	cd bf       	out	0x3d, r28	; 61
	long data_length;
	
	data_length = eeprom_read_byte((uint8_t*)0);
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	27 d2       	rcall	.+1102   	; 0x698 <eeprom_read_byte>
 24a:	88 2e       	mov	r8, r24
 24c:	91 2c       	mov	r9, r1
 24e:	a1 2c       	mov	r10, r1
 250:	b1 2c       	mov	r11, r1
	data_length = data_length << 8;
 252:	ba 2c       	mov	r11, r10
 254:	a9 2c       	mov	r10, r9
 256:	98 2c       	mov	r9, r8
 258:	88 24       	eor	r8, r8
	data_length = data_length + eeprom_read_byte((uint8_t*)1);
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	1c d2       	rcall	.+1080   	; 0x698 <eeprom_read_byte>
 260:	88 0e       	add	r8, r24
 262:	91 1c       	adc	r9, r1
 264:	a1 1c       	adc	r10, r1
 266:	b1 1c       	adc	r11, r1
	
	if (data_length > 0)
 268:	18 14       	cp	r1, r8
 26a:	19 04       	cpc	r1, r9
 26c:	1a 04       	cpc	r1, r10
 26e:	1b 04       	cpc	r1, r11
 270:	1c f1       	brlt	.+70     	; 0x2b8 <send_eeprom_data+0x98>
 272:	37 c0       	rjmp	.+110    	; 0x2e2 <send_eeprom_data+0xc2>
		int buf_counter = 0;
		char temp;
	
		for (int i=0; i < data_length; i++)
		{
				temp			 = eeprom_read_byte((uint8_t*) (i + 2));
 274:	c8 01       	movw	r24, r16
 276:	02 96       	adiw	r24, 0x02	; 2
 278:	0f d2       	rcall	.+1054   	; 0x698 <eeprom_read_byte>
				if (temp == NEW_LINE)
 27a:	8a 30       	cpi	r24, 0x0A	; 10
 27c:	81 f4       	brne	.+32     	; 0x29e <send_eeprom_data+0x7e>
				{
					buf[buf_counter] = temp;
 27e:	e1 e0       	ldi	r30, 0x01	; 1
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	ec 0f       	add	r30, r28
 284:	fd 1f       	adc	r31, r29
 286:	ee 0d       	add	r30, r14
 288:	ff 1d       	adc	r31, r15
 28a:	80 83       	st	Z, r24
					buf_counter		 = buf_counter + 1;
 28c:	b7 01       	movw	r22, r14
 28e:	6f 5f       	subi	r22, 0xFF	; 255
					UART_AddToQueue(buf, buf_counter);
 290:	7f 4f       	sbci	r23, 0xFF	; 255
 292:	ce 01       	movw	r24, r28
 294:	01 96       	adiw	r24, 0x01	; 1
 296:	50 d1       	rcall	.+672    	; 0x538 <UART_AddToQueue>
					buf_counter		 = 0;
 298:	e1 2c       	mov	r14, r1
 29a:	f1 2c       	mov	r15, r1
 29c:	0a c0       	rjmp	.+20     	; 0x2b2 <send_eeprom_data+0x92>
				}
				else
				{
					buf[buf_counter] = temp;
 29e:	e1 e0       	ldi	r30, 0x01	; 1
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	ec 0f       	add	r30, r28
 2a4:	fd 1f       	adc	r31, r29
 2a6:	ee 0d       	add	r30, r14
 2a8:	ff 1d       	adc	r31, r15
 2aa:	80 83       	st	Z, r24
					buf_counter		 = buf_counter + 1;	
 2ac:	8f ef       	ldi	r24, 0xFF	; 255
 2ae:	e8 1a       	sub	r14, r24
 2b0:	f8 0a       	sbc	r15, r24
	{
		char buf[32];
		int buf_counter = 0;
		char temp;
	
		for (int i=0; i < data_length; i++)
 2b2:	0f 5f       	subi	r16, 0xFF	; 255
 2b4:	1f 4f       	sbci	r17, 0xFF	; 255
 2b6:	04 c0       	rjmp	.+8      	; 0x2c0 <send_eeprom_data+0xa0>
 2b8:	00 e0       	ldi	r16, 0x00	; 0
 2ba:	10 e0       	ldi	r17, 0x00	; 0
 2bc:	e1 2c       	mov	r14, r1
 2be:	f1 2c       	mov	r15, r1
 2c0:	c8 01       	movw	r24, r16
 2c2:	01 2e       	mov	r0, r17
 2c4:	00 0c       	add	r0, r0
 2c6:	aa 0b       	sbc	r26, r26
 2c8:	bb 0b       	sbc	r27, r27
 2ca:	88 15       	cp	r24, r8
 2cc:	99 05       	cpc	r25, r9
 2ce:	aa 05       	cpc	r26, r10
 2d0:	bb 05       	cpc	r27, r11
 2d2:	84 f2       	brlt	.-96     	; 0x274 <send_eeprom_data+0x54>
					buf_counter		 = buf_counter + 1;	
				}
		}
		
		
		if (buf_counter != 0)
 2d4:	e1 14       	cp	r14, r1
 2d6:	f1 04       	cpc	r15, r1
		{
			UART_AddToQueue(buf, buf_counter);
 2d8:	21 f0       	breq	.+8      	; 0x2e2 <send_eeprom_data+0xc2>
 2da:	b7 01       	movw	r22, r14
 2dc:	ce 01       	movw	r24, r28
 2de:	01 96       	adiw	r24, 0x01	; 1
			buf_counter = 0;
		}
	}
	
	// Clear memory
	eeprom_write_byte((uint8_t*)0, 0);
 2e0:	2b d1       	rcall	.+598    	; 0x538 <UART_AddToQueue>
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	90 e0       	ldi	r25, 0x00	; 0
	eeprom_write_byte((uint8_t*)1, 0);
 2e8:	df d1       	rcall	.+958    	; 0x6a8 <eeprom_write_byte>
 2ea:	60 e0       	ldi	r22, 0x00	; 0
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	db d1       	rcall	.+950    	; 0x6a8 <eeprom_write_byte>
}
 2f2:	a0 96       	adiw	r28, 0x20	; 32
 2f4:	0f b6       	in	r0, 0x3f	; 63
 2f6:	f8 94       	cli
 2f8:	de bf       	out	0x3e, r29	; 62
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	cd bf       	out	0x3d, r28	; 61
 2fe:	df 91       	pop	r29
 300:	cf 91       	pop	r28
 302:	1f 91       	pop	r17
 304:	0f 91       	pop	r16
 306:	ff 90       	pop	r15
 308:	ef 90       	pop	r14
 30a:	bf 90       	pop	r11
 30c:	af 90       	pop	r10
 30e:	9f 90       	pop	r9
 310:	8f 90       	pop	r8
 312:	08 95       	ret

00000314 <main>:


int main(void)
{
    /* Replace with your application code */
	data_addr = 0;
 314:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 318:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 31c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 320:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	USART_INIT();
 324:	55 d0       	rcall	.+170    	; 0x3d0 <USART_INIT>
	sei();
 326:	78 94       	sei
    while (1) 
    {
		if ((uart0_flags.UART_FLAG == DATA_RECEIVED_FLAG) || (uart0_flags.UART_FLAG == DATA_REQUEST_FLAG)) 
 328:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <uart0_flags+0x1>
 32c:	82 30       	cpi	r24, 0x02	; 2
 32e:	21 f0       	breq	.+8      	; 0x338 <main+0x24>
 330:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <uart0_flags+0x1>
 334:	85 30       	cpi	r24, 0x05	; 5
 336:	c1 f7       	brne	.-16     	; 0x328 <main+0x14>
		{
			
			// Data was received -> need to save it to the EEPROM			
			if (uart0_flags.UART_FLAG == DATA_REQUEST_FLAG)
 338:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <uart0_flags+0x1>
 33c:	85 30       	cpi	r24, 0x05	; 5
			{
				send_eeprom_data();
 33e:	11 f4       	brne	.+4      	; 0x344 <main+0x30>
 340:	6f df       	rcall	.-290    	; 0x220 <send_eeprom_data>
			}
			
			else
			{
				save_eeprom_data();	
 342:	01 c0       	rjmp	.+2      	; 0x346 <main+0x32>
 344:	b4 de       	rcall	.-664    	; 0xae <save_eeprom_data>
			}			
			uart_set_RX_buf_len();
 346:	8c d1       	rcall	.+792    	; 0x660 <uart_set_RX_buf_len>
 348:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <uart0_flags+0x1>
			uart0_flags.UART_FLAG = DATA_OPERATION_COMPLETE_FLAG;
 34c:	ed cf       	rjmp	.-38     	; 0x328 <main+0x14>

0000034e <uart_rx_data>:
 34e:	cf 93       	push	r28

int uart_return_RX_buf_len()
{
	int value = uart0_indexes.UART_IN_IDX; 
	return value;
}
 350:	df 93       	push	r29
 352:	fc 01       	movw	r30, r24
 354:	4d 30       	cpi	r20, 0x0D	; 13
 356:	61 f5       	brne	.+88     	; 0x3b0 <uart_rx_data+0x62>
 358:	a6 e0       	ldi	r26, 0x06	; 6
 35a:	b1 e0       	ldi	r27, 0x01	; 1
 35c:	11 96       	adiw	r26, 0x01	; 1
 35e:	8c 91       	ld	r24, X
 360:	11 97       	sbiw	r26, 0x01	; 1
 362:	ef 01       	movw	r28, r30
 364:	c8 0f       	add	r28, r24
 366:	d1 1d       	adc	r29, r1
 368:	4a 83       	std	Y+2, r20	; 0x02
 36a:	81 81       	ldd	r24, Z+1	; 0x01
 36c:	8f 5f       	subi	r24, 0xFF	; 255
 36e:	81 83       	std	Z+1, r24	; 0x01
 370:	11 96       	adiw	r26, 0x01	; 1
 372:	8c 91       	ld	r24, X
 374:	df 01       	movw	r26, r30
 376:	a8 0f       	add	r26, r24
 378:	b1 1d       	adc	r27, r1
 37a:	8a e0       	ldi	r24, 0x0A	; 10
 37c:	12 96       	adiw	r26, 0x02	; 2
 37e:	8c 93       	st	X, r24
 380:	81 81       	ldd	r24, Z+1	; 0x01
 382:	8f 5f       	subi	r24, 0xFF	; 255
 384:	81 83       	std	Z+1, r24	; 0x01
 386:	db 01       	movw	r26, r22
 388:	1c 92       	st	X, r1
 38a:	82 e0       	ldi	r24, 0x02	; 2
 38c:	11 96       	adiw	r26, 0x01	; 1
 38e:	8c 93       	st	X, r24
 390:	11 97       	sbiw	r26, 0x01	; 1
 392:	81 81       	ldd	r24, Z+1	; 0x01
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <rx_msg_len+0x1>
 39a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <rx_msg_len>
 39e:	11 82       	std	Z+1, r1	; 0x01
 3a0:	82 81       	ldd	r24, Z+2	; 0x02
 3a2:	86 32       	cpi	r24, 0x26	; 38
 3a4:	91 f4       	brne	.+36     	; 0x3ca <uart_rx_data+0x7c>
 3a6:	85 e0       	ldi	r24, 0x05	; 5
 3a8:	11 96       	adiw	r26, 0x01	; 1
 3aa:	8c 93       	st	X, r24
 3ac:	11 82       	std	Z+1, r1	; 0x01
 3ae:	0d c0       	rjmp	.+26     	; 0x3ca <uart_rx_data+0x7c>
 3b0:	82 e0       	ldi	r24, 0x02	; 2
 3b2:	db 01       	movw	r26, r22
 3b4:	8c 93       	st	X, r24
 3b6:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <uart0_indexes+0x1>
 3ba:	df 01       	movw	r26, r30
 3bc:	a8 0f       	add	r26, r24
 3be:	b1 1d       	adc	r27, r1
 3c0:	12 96       	adiw	r26, 0x02	; 2
 3c2:	4c 93       	st	X, r20
 3c4:	81 81       	ldd	r24, Z+1	; 0x01
 3c6:	8f 5f       	subi	r24, 0xFF	; 255
 3c8:	81 83       	std	Z+1, r24	; 0x01
 3ca:	df 91       	pop	r29
 3cc:	cf 91       	pop	r28
 3ce:	08 95       	ret

000003d0 <USART_INIT>:
 3d0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 3d4:	33 e3       	ldi	r19, 0x33	; 51
 3d6:	30 93 c4 00 	sts	0x00C4, r19	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 3da:	22 e2       	ldi	r18, 0x22	; 34
 3dc:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 3e0:	98 e9       	ldi	r25, 0x98	; 152
 3e2:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 3e6:	86 e0       	ldi	r24, 0x06	; 6
 3e8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 3ec:	e6 e0       	ldi	r30, 0x06	; 6
 3ee:	f1 e0       	ldi	r31, 0x01	; 1
 3f0:	10 82       	st	Z, r1
 3f2:	11 82       	std	Z+1, r1	; 0x01
 3f4:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <rx_msg_len+0x1>
 3f8:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <rx_msg_len>
 3fc:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <UART_TX_MSG_LEN+0x1>
 400:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <UART_TX_MSG_LEN>
 404:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <uartQueue+0x84>
 408:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <uartQueue+0x85>
 40c:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <uartQueue+0x86>
 410:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <uartQueue+0x87>
 414:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <tempMsgValue>
 418:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <tempMsgValue+0x1>
 41c:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <tempMsgValue+0x2>
 420:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <tempMsgValue+0x3>
 424:	ec e4       	ldi	r30, 0x4C	; 76
 426:	f1 e0       	ldi	r31, 0x01	; 1
 428:	10 82       	st	Z, r1
 42a:	11 82       	std	Z+1, r1	; 0x01
 42c:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 430:	30 93 cc 00 	sts	0x00CC, r19	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 434:	20 93 c8 00 	sts	0x00C8, r18	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 438:	90 93 c9 00 	sts	0x00C9, r25	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
 43c:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
 440:	08 95       	ret

00000442 <__vector_28>:
 442:	1f 92       	push	r1
 444:	0f 92       	push	r0
 446:	0f b6       	in	r0, 0x3f	; 63
 448:	0f 92       	push	r0
 44a:	11 24       	eor	r1, r1
 44c:	0f 90       	pop	r0
 44e:	0f be       	out	0x3f, r0	; 63
 450:	0f 90       	pop	r0
 452:	1f 90       	pop	r1
 454:	18 95       	reti

00000456 <__vector_29>:
 456:	1f 92       	push	r1
 458:	0f 92       	push	r0
 45a:	0f b6       	in	r0, 0x3f	; 63
 45c:	0f 92       	push	r0
 45e:	11 24       	eor	r1, r1
 460:	0f 90       	pop	r0
 462:	0f be       	out	0x3f, r0	; 63
 464:	0f 90       	pop	r0
 466:	1f 90       	pop	r1
 468:	18 95       	reti

0000046a <__vector_21>:
 46a:	1f 92       	push	r1
 46c:	0f 92       	push	r0
 46e:	0f b6       	in	r0, 0x3f	; 63
 470:	0f 92       	push	r0
 472:	11 24       	eor	r1, r1
 474:	0b b6       	in	r0, 0x3b	; 59
 476:	0f 92       	push	r0
 478:	8f 93       	push	r24
 47a:	9f 93       	push	r25
 47c:	af 93       	push	r26
 47e:	bf 93       	push	r27
 480:	ef 93       	push	r30
 482:	ff 93       	push	r31
 484:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <uartQueue+0x86>
 488:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <uartQueue+0x85>
 48c:	81 e2       	ldi	r24, 0x21	; 33
 48e:	e8 9f       	mul	r30, r24
 490:	f0 01       	movw	r30, r0
 492:	11 24       	eor	r1, r1
 494:	ee 56       	subi	r30, 0x6E	; 110
 496:	fe 4f       	sbci	r31, 0xFE	; 254
 498:	80 a1       	ldd	r24, Z+32	; 0x20
 49a:	98 17       	cp	r25, r24
 49c:	a0 f4       	brcc	.+40     	; 0x4c6 <__vector_21+0x5c>
 49e:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <uartQueue+0x85>
 4a2:	a8 e1       	ldi	r26, 0x18	; 24
 4a4:	b2 e0       	ldi	r27, 0x02	; 2
 4a6:	8c 91       	ld	r24, X
 4a8:	91 e0       	ldi	r25, 0x01	; 1
 4aa:	98 0f       	add	r25, r24
 4ac:	9c 93       	st	X, r25
 4ae:	91 e2       	ldi	r25, 0x21	; 33
 4b0:	e9 9f       	mul	r30, r25
 4b2:	f0 01       	movw	r30, r0
 4b4:	11 24       	eor	r1, r1
 4b6:	ee 56       	subi	r30, 0x6E	; 110
 4b8:	fe 4f       	sbci	r31, 0xFE	; 254
 4ba:	e8 0f       	add	r30, r24
 4bc:	f1 1d       	adc	r31, r1
 4be:	80 81       	ld	r24, Z
 4c0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 4c4:	2c c0       	rjmp	.+88     	; 0x51e <__vector_21+0xb4>
 4c6:	e7 e1       	ldi	r30, 0x17	; 23
 4c8:	f2 e0       	ldi	r31, 0x02	; 2
 4ca:	80 81       	ld	r24, Z
 4cc:	8f 5f       	subi	r24, 0xFF	; 255
 4ce:	80 83       	st	Z, r24
 4d0:	80 81       	ld	r24, Z
 4d2:	8f 71       	andi	r24, 0x1F	; 31
 4d4:	80 83       	st	Z, r24
 4d6:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <uartQueue+0x86>
 4da:	90 81       	ld	r25, Z
 4dc:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <uartQueue+0x84>
 4e0:	98 13       	cpse	r25, r24
 4e2:	0a c0       	rjmp	.+20     	; 0x4f8 <__vector_21+0x8e>
 4e4:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <uartQueue+0x87>
 4e8:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <uartQueue+0x88>
 4ec:	e1 ec       	ldi	r30, 0xC1	; 193
 4ee:	f0 e0       	ldi	r31, 0x00	; 0
 4f0:	80 81       	ld	r24, Z
 4f2:	8f 7d       	andi	r24, 0xDF	; 223
 4f4:	80 83       	st	Z, r24
 4f6:	13 c0       	rjmp	.+38     	; 0x51e <__vector_21+0xb4>
 4f8:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <uartQueue+0x85>
 4fc:	a8 e1       	ldi	r26, 0x18	; 24
 4fe:	b2 e0       	ldi	r27, 0x02	; 2
 500:	8c 91       	ld	r24, X
 502:	91 e0       	ldi	r25, 0x01	; 1
 504:	98 0f       	add	r25, r24
 506:	9c 93       	st	X, r25
 508:	91 e2       	ldi	r25, 0x21	; 33
 50a:	e9 9f       	mul	r30, r25
 50c:	f0 01       	movw	r30, r0
 50e:	11 24       	eor	r1, r1
 510:	ee 56       	subi	r30, 0x6E	; 110
 512:	fe 4f       	sbci	r31, 0xFE	; 254
 514:	e8 0f       	add	r30, r24
 516:	f1 1d       	adc	r31, r1
 518:	80 81       	ld	r24, Z
 51a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 51e:	ff 91       	pop	r31
 520:	ef 91       	pop	r30
 522:	bf 91       	pop	r27
 524:	af 91       	pop	r26
 526:	9f 91       	pop	r25
 528:	8f 91       	pop	r24
 52a:	0f 90       	pop	r0
 52c:	0b be       	out	0x3b, r0	; 59
 52e:	0f 90       	pop	r0
 530:	0f be       	out	0x3f, r0	; 63
 532:	0f 90       	pop	r0
 534:	1f 90       	pop	r1
 536:	18 95       	reti

00000538 <UART_AddToQueue>:
 538:	cf 93       	push	r28
 53a:	df 93       	push	r29
 53c:	ac 01       	movw	r20, r24
 53e:	e6 e1       	ldi	r30, 0x16	; 22
 540:	f2 e0       	ldi	r31, 0x02	; 2
 542:	c0 81       	ld	r28, Z
 544:	d0 e0       	ldi	r29, 0x00	; 0
 546:	21 96       	adiw	r28, 0x01	; 1
 548:	cf 71       	andi	r28, 0x1F	; 31
 54a:	dd 27       	eor	r29, r29
 54c:	90 81       	ld	r25, Z
 54e:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <uartQueue+0x85>
 552:	98 17       	cp	r25, r24
 554:	30 f4       	brcc	.+12     	; 0x562 <UART_AddToQueue+0x2a>
 556:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <uartQueue+0x85>
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	c8 17       	cp	r28, r24
 55e:	d9 07       	cpc	r29, r25
 560:	19 f0       	breq	.+6      	; 0x568 <UART_AddToQueue+0x30>
 562:	20 e0       	ldi	r18, 0x00	; 0
 564:	30 e0       	ldi	r19, 0x00	; 0
 566:	19 c0       	rjmp	.+50     	; 0x59a <UART_AddToQueue+0x62>
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <uartQueue+0x88>
 56e:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <uartQueue+0x88>
 572:	81 11       	cpse	r24, r1
 574:	fc cf       	rjmp	.-8      	; 0x56e <UART_AddToQueue+0x36>
 576:	f5 cf       	rjmp	.-22     	; 0x562 <UART_AddToQueue+0x2a>
 578:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <uartQueue+0x84>
 57c:	da 01       	movw	r26, r20
 57e:	a2 0f       	add	r26, r18
 580:	b3 1f       	adc	r27, r19
 582:	9c 91       	ld	r25, X
 584:	81 e2       	ldi	r24, 0x21	; 33
 586:	e8 9f       	mul	r30, r24
 588:	f0 01       	movw	r30, r0
 58a:	11 24       	eor	r1, r1
 58c:	ee 56       	subi	r30, 0x6E	; 110
 58e:	fe 4f       	sbci	r31, 0xFE	; 254
 590:	e2 0f       	add	r30, r18
 592:	f3 1f       	adc	r31, r19
 594:	90 83       	st	Z, r25
 596:	2f 5f       	subi	r18, 0xFF	; 255
 598:	3f 4f       	sbci	r19, 0xFF	; 255
 59a:	26 17       	cp	r18, r22
 59c:	37 07       	cpc	r19, r23
 59e:	60 f3       	brcs	.-40     	; 0x578 <UART_AddToQueue+0x40>
 5a0:	a6 e1       	ldi	r26, 0x16	; 22
 5a2:	b2 e0       	ldi	r27, 0x02	; 2
 5a4:	ec 91       	ld	r30, X
 5a6:	91 e2       	ldi	r25, 0x21	; 33
 5a8:	e9 9f       	mul	r30, r25
 5aa:	f0 01       	movw	r30, r0
 5ac:	11 24       	eor	r1, r1
 5ae:	ee 56       	subi	r30, 0x6E	; 110
 5b0:	fe 4f       	sbci	r31, 0xFE	; 254
 5b2:	60 a3       	std	Z+32, r22	; 0x20
 5b4:	cc 93       	st	X, r28
 5b6:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <uartQueue+0x87>
 5ba:	81 11       	cpse	r24, r1
 5bc:	20 c0       	rjmp	.+64     	; 0x5fe <UART_AddToQueue+0xc6>
 5be:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <uart0_flags>
 5c2:	81 11       	cpse	r24, r1
 5c4:	1c c0       	rjmp	.+56     	; 0x5fe <UART_AddToQueue+0xc6>
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <uartQueue+0x87>
 5cc:	a8 e1       	ldi	r26, 0x18	; 24
 5ce:	b2 e0       	ldi	r27, 0x02	; 2
 5d0:	1c 92       	st	X, r1
 5d2:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <uartQueue+0x85>
 5d6:	8c 91       	ld	r24, X
 5d8:	91 e0       	ldi	r25, 0x01	; 1
 5da:	98 0f       	add	r25, r24
 5dc:	9c 93       	st	X, r25
 5de:	91 e2       	ldi	r25, 0x21	; 33
 5e0:	e9 9f       	mul	r30, r25
 5e2:	f0 01       	movw	r30, r0
 5e4:	11 24       	eor	r1, r1
 5e6:	ee 56       	subi	r30, 0x6E	; 110
 5e8:	fe 4f       	sbci	r31, 0xFE	; 254
 5ea:	e8 0f       	add	r30, r24
 5ec:	f1 1d       	adc	r31, r1
 5ee:	80 81       	ld	r24, Z
 5f0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 5f4:	e1 ec       	ldi	r30, 0xC1	; 193
 5f6:	f0 e0       	ldi	r31, 0x00	; 0
 5f8:	80 81       	ld	r24, Z
 5fa:	80 62       	ori	r24, 0x20	; 32
 5fc:	80 83       	st	Z, r24
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	df 91       	pop	r29
 602:	cf 91       	pop	r28
 604:	08 95       	ret

00000606 <__vector_20>:
 606:	1f 92       	push	r1
 608:	0f 92       	push	r0
 60a:	0f b6       	in	r0, 0x3f	; 63
 60c:	0f 92       	push	r0
 60e:	11 24       	eor	r1, r1
 610:	0b b6       	in	r0, 0x3b	; 59
 612:	0f 92       	push	r0
 614:	2f 93       	push	r18
 616:	3f 93       	push	r19
 618:	4f 93       	push	r20
 61a:	5f 93       	push	r21
 61c:	6f 93       	push	r22
 61e:	7f 93       	push	r23
 620:	8f 93       	push	r24
 622:	9f 93       	push	r25
 624:	af 93       	push	r26
 626:	bf 93       	push	r27
 628:	ef 93       	push	r30
 62a:	ff 93       	push	r31
 62c:	40 91 c6 00 	lds	r20, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 630:	6b e1       	ldi	r22, 0x1B	; 27
 632:	72 e0       	ldi	r23, 0x02	; 2
 634:	86 e0       	ldi	r24, 0x06	; 6
 636:	91 e0       	ldi	r25, 0x01	; 1
 638:	8a de       	rcall	.-748    	; 0x34e <uart_rx_data>
 63a:	ff 91       	pop	r31
 63c:	ef 91       	pop	r30
 63e:	bf 91       	pop	r27
 640:	af 91       	pop	r26
 642:	9f 91       	pop	r25
 644:	8f 91       	pop	r24
 646:	7f 91       	pop	r23
 648:	6f 91       	pop	r22
 64a:	5f 91       	pop	r21
 64c:	4f 91       	pop	r20
 64e:	3f 91       	pop	r19
 650:	2f 91       	pop	r18
 652:	0f 90       	pop	r0
 654:	0b be       	out	0x3b, r0	; 59
 656:	0f 90       	pop	r0
 658:	0f be       	out	0x3f, r0	; 63
 65a:	0f 90       	pop	r0
 65c:	1f 90       	pop	r1
 65e:	18 95       	reti

00000660 <uart_set_RX_buf_len>:

void uart_set_RX_buf_len()
{
	rx_msg_len = 0;
 660:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <rx_msg_len+0x1>
 664:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <rx_msg_len>
 668:	08 95       	ret

0000066a <uart_return_RX_buf>:
}

int uart_return_RX_buf(unsigned char* data)
{
 66a:	ac 01       	movw	r20, r24
	for (int i = 0; i < rx_msg_len; i++) 
 66c:	20 e0       	ldi	r18, 0x00	; 0
 66e:	30 e0       	ldi	r19, 0x00	; 0
 670:	0b c0       	rjmp	.+22     	; 0x688 <uart_return_RX_buf+0x1e>
	{
		data[i] = uart0_indexes.UART_RX_BUFFER[i]; 
 672:	fa 01       	movw	r30, r20
 674:	e2 0f       	add	r30, r18
 676:	f3 1f       	adc	r31, r19
 678:	d9 01       	movw	r26, r18
 67a:	aa 5f       	subi	r26, 0xFA	; 250
 67c:	be 4f       	sbci	r27, 0xFE	; 254
 67e:	12 96       	adiw	r26, 0x02	; 2
 680:	9c 91       	ld	r25, X
 682:	90 83       	st	Z, r25
	rx_msg_len = 0;
}

int uart_return_RX_buf(unsigned char* data)
{
	for (int i = 0; i < rx_msg_len; i++) 
 684:	2f 5f       	subi	r18, 0xFF	; 255
 686:	3f 4f       	sbci	r19, 0xFF	; 255
 688:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <rx_msg_len>
 68c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <rx_msg_len+0x1>
 690:	28 17       	cp	r18, r24
 692:	39 07       	cpc	r19, r25
 694:	74 f3       	brlt	.-36     	; 0x672 <uart_return_RX_buf+0x8>
	{
		data[i] = uart0_indexes.UART_RX_BUFFER[i]; 
	}
	return rx_msg_len;
 696:	08 95       	ret

00000698 <eeprom_read_byte>:
 698:	f9 99       	sbic	0x1f, 1	; 31
 69a:	fe cf       	rjmp	.-4      	; 0x698 <eeprom_read_byte>
 69c:	92 bd       	out	0x22, r25	; 34
 69e:	81 bd       	out	0x21, r24	; 33
 6a0:	f8 9a       	sbi	0x1f, 0	; 31
 6a2:	99 27       	eor	r25, r25
 6a4:	80 b5       	in	r24, 0x20	; 32
 6a6:	08 95       	ret

000006a8 <eeprom_write_byte>:
 6a8:	26 2f       	mov	r18, r22

000006aa <eeprom_write_r18>:
 6aa:	f9 99       	sbic	0x1f, 1	; 31
 6ac:	fe cf       	rjmp	.-4      	; 0x6aa <eeprom_write_r18>
 6ae:	1f ba       	out	0x1f, r1	; 31
 6b0:	92 bd       	out	0x22, r25	; 34
 6b2:	81 bd       	out	0x21, r24	; 33
 6b4:	20 bd       	out	0x20, r18	; 32
 6b6:	0f b6       	in	r0, 0x3f	; 63
 6b8:	f8 94       	cli
 6ba:	fa 9a       	sbi	0x1f, 2	; 31
 6bc:	f9 9a       	sbi	0x1f, 1	; 31
 6be:	0f be       	out	0x3f, r0	; 63
 6c0:	01 96       	adiw	r24, 0x01	; 1
 6c2:	08 95       	ret

000006c4 <_exit>:
 6c4:	f8 94       	cli

000006c6 <__stop_program>:
 6c6:	ff cf       	rjmp	.-2      	; 0x6c6 <__stop_program>
