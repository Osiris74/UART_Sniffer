
UART sniffer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000a64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000326  00800100  00800100  00000a64  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a64  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000ad8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001726  00000000  00000000  00000bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b2f  00000000  00000000  000022ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b05  00000000  00000000  00002e1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f8  00000000  00000000  00003924  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006e5  00000000  00000000  00003c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d5f  00000000  00000000  00004301  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	c6 c2       	rjmp	.+1420   	; 0x5de <__vector_20>
  52:	00 00       	nop
  54:	58 c3       	rjmp	.+1712   	; 0x706 <__vector_21>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	89 c2       	rjmp	.+1298   	; 0x584 <__vector_28>
  72:	00 00       	nop
  74:	e1 c2       	rjmp	.+1474   	; 0x638 <__vector_29>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	24 e0       	ldi	r18, 0x04	; 4
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a6 32       	cpi	r26, 0x26	; 38
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	40 d1       	rcall	.+640    	; 0x32a <main>
  aa:	a0 c4       	rjmp	.+2368   	; 0x9ec <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <save_eeprom_data>:
volatile int data_addr;



void save_eeprom_data(char uart_number)
{
  ae:	bf 92       	push	r11
  b0:	cf 92       	push	r12
  b2:	df 92       	push	r13
  b4:	ef 92       	push	r14
  b6:	ff 92       	push	r15
  b8:	0f 93       	push	r16
  ba:	1f 93       	push	r17
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
  c4:	a0 97       	sbiw	r28, 0x20	; 32
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	f8 94       	cli
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	cd bf       	out	0x3d, r28	; 61
  d0:	18 2f       	mov	r17, r24
	char data[32];
	int len;
			
	len = uart_return_RX_buf(data, uart_number);
  d2:	68 2f       	mov	r22, r24
  d4:	ce 01       	movw	r24, r28
  d6:	01 96       	adiw	r24, 0x01	; 1
  d8:	25 d4       	rcall	.+2122   	; 0x924 <uart_return_RX_buf>
  da:	7c 01       	movw	r14, r24
	
	if (data_addr == 0)
  dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  e4:	89 2b       	or	r24, r25
  e6:	09 f0       	breq	.+2      	; 0xea <save_eeprom_data+0x3c>
  e8:	42 c0       	rjmp	.+132    	; 0x16e <save_eeprom_data+0xc0>
	{
		// write data length
			
		data_addr = len;		
  ea:	f0 92 01 01 	sts	0x0101, r15	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ee:	e0 92 00 01 	sts	0x0100, r14	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		if (uart_number == 1)
  f2:	11 30       	cpi	r17, 0x01	; 1
  f4:	49 f4       	brne	.+18     	; 0x108 <save_eeprom_data+0x5a>
		{
			data_addr = data_addr + 2;
  f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  fe:	02 96       	adiw	r24, 0x02	; 2
 100:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 104:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		
		// Saves length of the data		
		eeprom_write_byte((uint8_t*)0, data_addr >> 8);
 108:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 10c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 110:	69 2f       	mov	r22, r25
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	5c d4       	rcall	.+2232   	; 0x9d0 <eeprom_write_byte>
		eeprom_write_byte((uint8_t*)1, data_addr	 );
 118:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 11c:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	55 d4       	rcall	.+2218   	; 0x9d0 <eeprom_write_byte>
		
		char char_offset = 0;
		if (uart_number == 1)
 126:	11 30       	cpi	r17, 0x01	; 1
 128:	61 f4       	brne	.+24     	; 0x142 <save_eeprom_data+0x94>
		{
			eeprom_write_byte((uint8_t*) (2), 'A');
 12a:	61 e4       	ldi	r22, 0x41	; 65
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	4f d4       	rcall	.+2206   	; 0x9d0 <eeprom_write_byte>
			eeprom_write_byte((uint8_t*) (3), 'A');
 132:	61 e4       	ldi	r22, 0x41	; 65
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	4b d4       	rcall	.+2198   	; 0x9d0 <eeprom_write_byte>
 13a:	68 94       	set
			char_offset                  = 2;
 13c:	dd 24       	eor	r13, r13
 13e:	d1 f8       	bld	r13, 1
 140:	01 c0       	rjmp	.+2      	; 0x144 <save_eeprom_data+0x96>
 142:	d1 2c       	mov	r13, r1
		
		// Saves length of the data		
		eeprom_write_byte((uint8_t*)0, data_addr >> 8);
		eeprom_write_byte((uint8_t*)1, data_addr	 );
		
		char char_offset = 0;
 144:	00 e0       	ldi	r16, 0x00	; 0
			eeprom_write_byte((uint8_t*) (2), 'A');
			eeprom_write_byte((uint8_t*) (3), 'A');
			char_offset                  = 2;
		}	
		// Add data to the eeprom
		for (int i=0; i < len; i++)
 146:	10 e0       	ldi	r17, 0x00	; 0
 148:	0e c0       	rjmp	.+28     	; 0x166 <save_eeprom_data+0xb8>
 14a:	e1 e0       	ldi	r30, 0x01	; 1
		{
			eeprom_write_byte((uint8_t*) (2+i+char_offset), data[i]);
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	ec 0f       	add	r30, r28
 150:	fd 1f       	adc	r31, r29
 152:	e0 0f       	add	r30, r16
 154:	f1 1f       	adc	r31, r17
 156:	60 81       	ld	r22, Z
 158:	c8 01       	movw	r24, r16
 15a:	02 96       	adiw	r24, 0x02	; 2
 15c:	8d 0d       	add	r24, r13
 15e:	91 1d       	adc	r25, r1
 160:	37 d4       	rcall	.+2158   	; 0x9d0 <eeprom_write_byte>
 162:	0f 5f       	subi	r16, 0xFF	; 255
			eeprom_write_byte((uint8_t*) (2), 'A');
			eeprom_write_byte((uint8_t*) (3), 'A');
			char_offset                  = 2;
		}	
		// Add data to the eeprom
		for (int i=0; i < len; i++)
 164:	1f 4f       	sbci	r17, 0xFF	; 255
 166:	0e 15       	cp	r16, r14
 168:	1f 05       	cpc	r17, r15
 16a:	7c f3       	brlt	.-34     	; 0x14a <save_eeprom_data+0x9c>
 16c:	52 c0       	rjmp	.+164    	; 0x212 <save_eeprom_data+0x164>
		// I need only to re-write it 
		
		unsigned int offset;
		
		// Read length of previous data
		offset      = eeprom_read_byte((uint8_t*)0);
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	26 d4       	rcall	.+2124   	; 0x9c0 <eeprom_read_byte>
 174:	c8 2e       	mov	r12, r24
 176:	d1 2c       	mov	r13, r1
		offset      = offset << 8;
 178:	dc 2c       	mov	r13, r12
 17a:	cc 24       	eor	r12, r12
		offset	    = offset + eeprom_read_byte((uint8_t*)1);
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	1f d4       	rcall	.+2110   	; 0x9c0 <eeprom_read_byte>
 182:	c8 0e       	add	r12, r24
 184:	d1 1c       	adc	r13, r1
 186:	c7 01       	movw	r24, r14
		
		data_addr   = offset + len;
 188:	8c 0d       	add	r24, r12
 18a:	9d 1d       	adc	r25, r13
 18c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 190:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 194:	11 30       	cpi	r17, 0x01	; 1
		
		if (uart_number == 1)
 196:	49 f4       	brne	.+18     	; 0x1aa <save_eeprom_data+0xfc>
 198:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
		{
			data_addr = data_addr + 2;
 19c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1a0:	02 96       	adiw	r24, 0x02	; 2
 1a2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1a6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		
		// Set new length of the data
		eeprom_write_byte((uint8_t*)0, data_addr >> 8);
 1aa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ae:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1b2:	69 2f       	mov	r22, r25
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0b d4       	rcall	.+2070   	; 0x9d0 <eeprom_write_byte>
		eeprom_write_byte((uint8_t*)1, data_addr	   );
 1ba:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1be:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	04 d4       	rcall	.+2056   	; 0x9d0 <eeprom_write_byte>
		
		// DEBUG
		//UART_AddToQueue(buf, temp_len);
		
		char char_offset = 0;
		if (uart_number == 1)
 1c8:	11 30       	cpi	r17, 0x01	; 1
 1ca:	61 f4       	brne	.+24     	; 0x1e4 <save_eeprom_data+0x136>
		{
			eeprom_write_byte((uint8_t*) (2 + offset), 'A');
 1cc:	61 e4       	ldi	r22, 0x41	; 65
 1ce:	c6 01       	movw	r24, r12
 1d0:	02 96       	adiw	r24, 0x02	; 2
 1d2:	fe d3       	rcall	.+2044   	; 0x9d0 <eeprom_write_byte>
 1d4:	61 e4       	ldi	r22, 0x41	; 65
			eeprom_write_byte((uint8_t*) (3 + offset), 'A');
 1d6:	c6 01       	movw	r24, r12
 1d8:	03 96       	adiw	r24, 0x03	; 3
 1da:	fa d3       	rcall	.+2036   	; 0x9d0 <eeprom_write_byte>
 1dc:	68 94       	set
 1de:	bb 24       	eor	r11, r11
			char_offset			= 2;
 1e0:	b1 f8       	bld	r11, 1
 1e2:	01 c0       	rjmp	.+2      	; 0x1e6 <save_eeprom_data+0x138>
 1e4:	b1 2c       	mov	r11, r1
 1e6:	00 e0       	ldi	r16, 0x00	; 0
		eeprom_write_byte((uint8_t*)1, data_addr	   );
		
		// DEBUG
		//UART_AddToQueue(buf, temp_len);
		
		char char_offset = 0;
 1e8:	10 e0       	ldi	r17, 0x00	; 0
			eeprom_write_byte((uint8_t*) (2 + offset), 'A');
			eeprom_write_byte((uint8_t*) (3 + offset), 'A');
			char_offset			= 2;
		}
				
		for (int i=0; i < len; i++)
 1ea:	10 c0       	rjmp	.+32     	; 0x20c <save_eeprom_data+0x15e>
 1ec:	e1 e0       	ldi	r30, 0x01	; 1
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
		{
			eeprom_write_byte((uint8_t*) (2+i+offset+char_offset), data[i]);
 1f0:	ec 0f       	add	r30, r28
 1f2:	fd 1f       	adc	r31, r29
 1f4:	e0 0f       	add	r30, r16
 1f6:	f1 1f       	adc	r31, r17
 1f8:	60 81       	ld	r22, Z
 1fa:	c8 01       	movw	r24, r16
 1fc:	8c 0d       	add	r24, r12
 1fe:	9d 1d       	adc	r25, r13
 200:	8b 0d       	add	r24, r11
 202:	91 1d       	adc	r25, r1
 204:	02 96       	adiw	r24, 0x02	; 2
 206:	e4 d3       	rcall	.+1992   	; 0x9d0 <eeprom_write_byte>
 208:	0f 5f       	subi	r16, 0xFF	; 255
 20a:	1f 4f       	sbci	r17, 0xFF	; 255
			eeprom_write_byte((uint8_t*) (2 + offset), 'A');
			eeprom_write_byte((uint8_t*) (3 + offset), 'A');
			char_offset			= 2;
		}
				
		for (int i=0; i < len; i++)
 20c:	0e 15       	cp	r16, r14
 20e:	1f 05       	cpc	r17, r15
 210:	6c f3       	brlt	.-38     	; 0x1ec <save_eeprom_data+0x13e>
 212:	a0 96       	adiw	r28, 0x20	; 32
 214:	0f b6       	in	r0, 0x3f	; 63
		{
			eeprom_write_byte((uint8_t*) (2+i+offset+char_offset), data[i]);
		}
		
	}
}
 216:	f8 94       	cli
 218:	de bf       	out	0x3e, r29	; 62
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	cd bf       	out	0x3d, r28	; 61
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	1f 91       	pop	r17
 224:	0f 91       	pop	r16
 226:	ff 90       	pop	r15
 228:	ef 90       	pop	r14
 22a:	df 90       	pop	r13
 22c:	cf 90       	pop	r12
 22e:	bf 90       	pop	r11
 230:	08 95       	ret

00000232 <send_eeprom_data>:
 232:	8f 92       	push	r8
 234:	9f 92       	push	r9


void send_eeprom_data()
{
 236:	af 92       	push	r10
 238:	bf 92       	push	r11
 23a:	ef 92       	push	r14
 23c:	ff 92       	push	r15
 23e:	0f 93       	push	r16
 240:	1f 93       	push	r17
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	cd b7       	in	r28, 0x3d	; 61
 248:	de b7       	in	r29, 0x3e	; 62
 24a:	a0 97       	sbiw	r28, 0x20	; 32
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	f8 94       	cli
 250:	de bf       	out	0x3e, r29	; 62
 252:	0f be       	out	0x3f, r0	; 63
 254:	cd bf       	out	0x3d, r28	; 61
	long data_length;
	
	data_length = eeprom_read_byte((uint8_t*)0);
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	b2 d3       	rcall	.+1892   	; 0x9c0 <eeprom_read_byte>
 25c:	88 2e       	mov	r8, r24
 25e:	91 2c       	mov	r9, r1
 260:	a1 2c       	mov	r10, r1
 262:	b1 2c       	mov	r11, r1
	data_length = data_length << 8;
 264:	ba 2c       	mov	r11, r10
 266:	a9 2c       	mov	r10, r9
 268:	98 2c       	mov	r9, r8
 26a:	88 24       	eor	r8, r8
	data_length = data_length + eeprom_read_byte((uint8_t*)1);
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	a7 d3       	rcall	.+1870   	; 0x9c0 <eeprom_read_byte>
 272:	88 0e       	add	r8, r24
 274:	91 1c       	adc	r9, r1
 276:	a1 1c       	adc	r10, r1
 278:	b1 1c       	adc	r11, r1
	
	if (data_length > 0)
 27a:	18 14       	cp	r1, r8
 27c:	19 04       	cpc	r1, r9
 27e:	1a 04       	cpc	r1, r10
 280:	1b 04       	cpc	r1, r11
 282:	24 f1       	brlt	.+72     	; 0x2cc <send_eeprom_data+0x9a>
 284:	39 c0       	rjmp	.+114    	; 0x2f8 <send_eeprom_data+0xc6>
		int buf_counter = 0;
		char temp;
	
		for (int i=0; i < data_length; i++)
		{
				temp			 = eeprom_read_byte((uint8_t*) (i + 2));
 286:	c8 01       	movw	r24, r16
 288:	02 96       	adiw	r24, 0x02	; 2
 28a:	9a d3       	rcall	.+1844   	; 0x9c0 <eeprom_read_byte>
				if (temp == UART_STOP_BYTE)
 28c:	8d 30       	cpi	r24, 0x0D	; 13
 28e:	89 f4       	brne	.+34     	; 0x2b2 <send_eeprom_data+0x80>
				{
					buf[buf_counter] = temp;
 290:	e1 e0       	ldi	r30, 0x01	; 1
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	ec 0f       	add	r30, r28
 296:	fd 1f       	adc	r31, r29
 298:	ee 0d       	add	r30, r14
 29a:	ff 1d       	adc	r31, r15
 29c:	80 83       	st	Z, r24
					buf_counter		 = buf_counter + 1;
 29e:	b7 01       	movw	r22, r14
 2a0:	6f 5f       	subi	r22, 0xFF	; 255
 2a2:	7f 4f       	sbci	r23, 0xFF	; 255
					UART_AddToQueue(buf, buf_counter, 0);
 2a4:	40 e0       	ldi	r20, 0x00	; 0
 2a6:	ce 01       	movw	r24, r28
 2a8:	01 96       	adiw	r24, 0x01	; 1
 2aa:	1d d3       	rcall	.+1594   	; 0x8e6 <UART_AddToQueue>
					buf_counter		 = 0;
 2ac:	e1 2c       	mov	r14, r1
 2ae:	f1 2c       	mov	r15, r1
 2b0:	0a c0       	rjmp	.+20     	; 0x2c6 <send_eeprom_data+0x94>
				}
				else
				{
					buf[buf_counter] = temp;
 2b2:	e1 e0       	ldi	r30, 0x01	; 1
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	ec 0f       	add	r30, r28
 2b8:	fd 1f       	adc	r31, r29
 2ba:	ee 0d       	add	r30, r14
 2bc:	ff 1d       	adc	r31, r15
 2be:	80 83       	st	Z, r24
					buf_counter		 = buf_counter + 1;	
 2c0:	8f ef       	ldi	r24, 0xFF	; 255
 2c2:	e8 1a       	sub	r14, r24
 2c4:	f8 0a       	sbc	r15, r24
	{
		char buf[32];
		int buf_counter = 0;
		char temp;
	
		for (int i=0; i < data_length; i++)
 2c6:	0f 5f       	subi	r16, 0xFF	; 255
 2c8:	1f 4f       	sbci	r17, 0xFF	; 255
 2ca:	04 c0       	rjmp	.+8      	; 0x2d4 <send_eeprom_data+0xa2>
 2cc:	00 e0       	ldi	r16, 0x00	; 0
 2ce:	10 e0       	ldi	r17, 0x00	; 0
 2d0:	e1 2c       	mov	r14, r1
 2d2:	f1 2c       	mov	r15, r1
 2d4:	c8 01       	movw	r24, r16
 2d6:	01 2e       	mov	r0, r17
 2d8:	00 0c       	add	r0, r0
 2da:	aa 0b       	sbc	r26, r26
 2dc:	bb 0b       	sbc	r27, r27
 2de:	88 15       	cp	r24, r8
 2e0:	99 05       	cpc	r25, r9
 2e2:	aa 05       	cpc	r26, r10
 2e4:	bb 05       	cpc	r27, r11
 2e6:	7c f2       	brlt	.-98     	; 0x286 <send_eeprom_data+0x54>
					buf_counter		 = buf_counter + 1;	
				}
		}
		
		
		if (buf_counter != 0)
 2e8:	e1 14       	cp	r14, r1
 2ea:	f1 04       	cpc	r15, r1
 2ec:	29 f0       	breq	.+10     	; 0x2f8 <send_eeprom_data+0xc6>
		{
			UART_AddToQueue(buf, buf_counter, 0);
 2ee:	40 e0       	ldi	r20, 0x00	; 0
 2f0:	b7 01       	movw	r22, r14
 2f2:	ce 01       	movw	r24, r28
 2f4:	01 96       	adiw	r24, 0x01	; 1
		}
	}
	
	data_length = 0;
	// Clear memory
	eeprom_write_byte((uint8_t*)0, 0);
 2f6:	f7 d2       	rcall	.+1518   	; 0x8e6 <UART_AddToQueue>
 2f8:	60 e0       	ldi	r22, 0x00	; 0
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	90 e0       	ldi	r25, 0x00	; 0
	eeprom_write_byte((uint8_t*)1, 0);
 2fe:	68 d3       	rcall	.+1744   	; 0x9d0 <eeprom_write_byte>
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	64 d3       	rcall	.+1736   	; 0x9d0 <eeprom_write_byte>
}
 308:	a0 96       	adiw	r28, 0x20	; 32
 30a:	0f b6       	in	r0, 0x3f	; 63
 30c:	f8 94       	cli
 30e:	de bf       	out	0x3e, r29	; 62
 310:	0f be       	out	0x3f, r0	; 63
 312:	cd bf       	out	0x3d, r28	; 61
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	1f 91       	pop	r17
 31a:	0f 91       	pop	r16
 31c:	ff 90       	pop	r15
 31e:	ef 90       	pop	r14
 320:	bf 90       	pop	r11
 322:	af 90       	pop	r10
 324:	9f 90       	pop	r9
 326:	8f 90       	pop	r8
 328:	08 95       	ret

0000032a <main>:



int main(void)
{
 32a:	cf 93       	push	r28
 32c:	df 93       	push	r29
 32e:	cd b7       	in	r28, 0x3d	; 61
 330:	de b7       	in	r29, 0x3e	; 62
 332:	c0 54       	subi	r28, 0x40	; 64
 334:	d1 09       	sbc	r29, r1
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	f8 94       	cli
 33a:	de bf       	out	0x3e, r29	; 62
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	data_addr = 0;
 340:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 344:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	USART_INIT();
 348:	dc d0       	rcall	.+440    	; 0x502 <USART_INIT>
	sei();
 34a:	78 94       	sei
    while (1) 
    {
	
		if ((uart0_flags.UART_FLAG == DATA_RECEIVED_FLAG) || (uart0_flags.UART_FLAG == DATA_REQUEST_FLAG)) 
 34c:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <uart0_flags+0x1>
 350:	82 30       	cpi	r24, 0x02	; 2
 352:	29 f0       	breq	.+10     	; 0x35e <main+0x34>
 354:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <uart0_flags+0x1>
 358:	85 30       	cpi	r24, 0x05	; 5
 35a:	09 f0       	breq	.+2      	; 0x35e <main+0x34>
 35c:	44 c0       	rjmp	.+136    	; 0x3e6 <main+0xbc>
		{			
			// Data was received -> need to save it to the EEPROM			
			if (uart0_flags.UART_FLAG == DATA_REQUEST_FLAG)
 35e:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <uart0_flags+0x1>
 362:	85 30       	cpi	r24, 0x05	; 5
			{
				send_eeprom_data();
 364:	11 f4       	brne	.+4      	; 0x36a <main+0x40>
 366:	65 df       	rcall	.-310    	; 0x232 <send_eeprom_data>
 368:	3a c0       	rjmp	.+116    	; 0x3de <main+0xb4>
					char buf[32];
					int buf_counter = 0;
					char temp;
					int len;
					
					len = uart_return_RX_buf(data, 0);
 36a:	60 e0       	ldi	r22, 0x00	; 0
 36c:	ce 01       	movw	r24, r28
 36e:	81 96       	adiw	r24, 0x21	; 33
 370:	d9 d2       	rcall	.+1458   	; 0x924 <uart_return_RX_buf>
 372:	7c 01       	movw	r14, r24
					
					// send data to the Master
					for (int i=0; i < len; i++)
 374:	00 e0       	ldi	r16, 0x00	; 0
 376:	10 e0       	ldi	r17, 0x00	; 0
			else
			{
				
					char data[32];
					char buf[32];
					int buf_counter = 0;
 378:	60 e0       	ldi	r22, 0x00	; 0
 37a:	70 e0       	ldi	r23, 0x00	; 0
					int len;
					
					len = uart_return_RX_buf(data, 0);
					
					// send data to the Master
					for (int i=0; i < len; i++)
 37c:	24 c0       	rjmp	.+72     	; 0x3c6 <main+0x9c>
					{
						temp = data[i];
 37e:	e1 e2       	ldi	r30, 0x21	; 33
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	ec 0f       	add	r30, r28
 384:	fd 1f       	adc	r31, r29
 386:	e0 0f       	add	r30, r16
 388:	f1 1f       	adc	r31, r17
 38a:	80 81       	ld	r24, Z
						if (temp == UART_STOP_BYTE)
 38c:	8d 30       	cpi	r24, 0x0D	; 13
 38e:	81 f4       	brne	.+32     	; 0x3b0 <main+0x86>
						{
							buf[buf_counter] = temp;
 390:	e1 e0       	ldi	r30, 0x01	; 1
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	ec 0f       	add	r30, r28
 396:	fd 1f       	adc	r31, r29
 398:	e6 0f       	add	r30, r22
 39a:	f7 1f       	adc	r31, r23
 39c:	80 83       	st	Z, r24
							buf_counter		 = buf_counter + 1;
 39e:	6f 5f       	subi	r22, 0xFF	; 255
 3a0:	7f 4f       	sbci	r23, 0xFF	; 255
							UART_AddToQueue(buf, buf_counter, 1);
 3a2:	41 e0       	ldi	r20, 0x01	; 1
 3a4:	ce 01       	movw	r24, r28
 3a6:	01 96       	adiw	r24, 0x01	; 1
 3a8:	9e d2       	rcall	.+1340   	; 0x8e6 <UART_AddToQueue>
							buf_counter		 = 0;
 3aa:	60 e0       	ldi	r22, 0x00	; 0
 3ac:	70 e0       	ldi	r23, 0x00	; 0
 3ae:	09 c0       	rjmp	.+18     	; 0x3c2 <main+0x98>
						}
						else
						{
							buf[buf_counter] = temp;
 3b0:	e1 e0       	ldi	r30, 0x01	; 1
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	ec 0f       	add	r30, r28
 3b6:	fd 1f       	adc	r31, r29
 3b8:	e6 0f       	add	r30, r22
 3ba:	f7 1f       	adc	r31, r23
 3bc:	80 83       	st	Z, r24
							buf_counter		 = buf_counter + 1;
 3be:	6f 5f       	subi	r22, 0xFF	; 255
 3c0:	7f 4f       	sbci	r23, 0xFF	; 255
					int len;
					
					len = uart_return_RX_buf(data, 0);
					
					// send data to the Master
					for (int i=0; i < len; i++)
 3c2:	0f 5f       	subi	r16, 0xFF	; 255
 3c4:	1f 4f       	sbci	r17, 0xFF	; 255
 3c6:	0e 15       	cp	r16, r14
 3c8:	1f 05       	cpc	r17, r15
 3ca:	cc f2       	brlt	.-78     	; 0x37e <main+0x54>
							buf[buf_counter] = temp;
							buf_counter		 = buf_counter + 1;
						}
					}
					
					if (buf_counter != 0)
 3cc:	61 15       	cp	r22, r1
 3ce:	71 05       	cpc	r23, r1
					{
					    UART_AddToQueue(buf, buf_counter, 1);
 3d0:	21 f0       	breq	.+8      	; 0x3da <main+0xb0>
 3d2:	41 e0       	ldi	r20, 0x01	; 1
 3d4:	ce 01       	movw	r24, r28
					}
								
				save_eeprom_data(0);	
 3d6:	01 96       	adiw	r24, 0x01	; 1
 3d8:	86 d2       	rcall	.+1292   	; 0x8e6 <UART_AddToQueue>
 3da:	80 e0       	ldi	r24, 0x00	; 0
			}			
			
			uart_set_RX_buf_len(0);
 3dc:	68 de       	rcall	.-816    	; 0xae <save_eeprom_data>
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	95 d2       	rcall	.+1322   	; 0x90c <uart_set_RX_buf_len>
			uart0_flags.UART_FLAG = DATA_OPERATION_COMPLETE_FLAG;
 3e2:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <uart0_flags+0x1>
		}
		
		if ((uart1_flags.UART_FLAG == DATA_RECEIVED_FLAG) || (uart1_flags.UART_FLAG == DATA_REQUEST_FLAG))
 3e6:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <uart1_flags+0x1>
 3ea:	82 30       	cpi	r24, 0x02	; 2
 3ec:	29 f0       	breq	.+10     	; 0x3f8 <main+0xce>
 3ee:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <uart1_flags+0x1>
 3f2:	85 30       	cpi	r24, 0x05	; 5
 3f4:	09 f0       	breq	.+2      	; 0x3f8 <main+0xce>
 3f6:	aa cf       	rjmp	.-172    	; 0x34c <main+0x22>
		{
			// Data was received -> need to save it to the EEPROM
			if (uart1_flags.UART_FLAG == DATA_REQUEST_FLAG)
 3f8:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <uart1_flags+0x1>
 3fc:	85 30       	cpi	r24, 0x05	; 5
 3fe:	09 f4       	brne	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
				unsigned char data[32];
				unsigned char buf [32];
				int buf_counter = 0;
				int len;
			
				len = uart_return_RX_buf(data, 1);					
 400:	4d c0       	rjmp	.+154    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 402:	61 e0       	ldi	r22, 0x01	; 1
 404:	ce 01       	movw	r24, r28
 406:	81 96       	adiw	r24, 0x21	; 33
 408:	8d d2       	rcall	.+1306   	; 0x924 <uart_return_RX_buf>
 40a:	7c 01       	movw	r14, r24
				
				if (data[0] == 'S')
 40c:	89 a1       	ldd	r24, Y+33	; 0x21
 40e:	83 35       	cpi	r24, 0x53	; 83
 410:	81 f4       	brne	.+32     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
				{
				  char buf_sc[8];
				  buf_sc[0] = 'Y';
 412:	89 e5       	ldi	r24, 0x59	; 89
 414:	89 83       	std	Y+1, r24	; 0x01
				  buf_sc[1] = '1';
 416:	81 e3       	ldi	r24, 0x31	; 49
 418:	8a 83       	std	Y+2, r24	; 0x02
				  buf_sc[2] = '5';
 41a:	85 e3       	ldi	r24, 0x35	; 53
 41c:	8b 83       	std	Y+3, r24	; 0x03
				  buf_sc[3] = '9';
 41e:	89 e3       	ldi	r24, 0x39	; 57
				  buf_sc[4] = 0x0D;
 420:	8c 83       	std	Y+4, r24	; 0x04
 422:	8d e0       	ldi	r24, 0x0D	; 13
				  UART_AddToQueue(buf_sc, 5, 0);	
 424:	8d 83       	std	Y+5, r24	; 0x05
 426:	40 e0       	ldi	r20, 0x00	; 0
 428:	65 e0       	ldi	r22, 0x05	; 5
 42a:	70 e0       	ldi	r23, 0x00	; 0
 42c:	ce 01       	movw	r24, r28
 42e:	01 96       	adiw	r24, 0x01	; 1
 430:	5a d2       	rcall	.+1204   	; 0x8e6 <UART_AddToQueue>
					if (temp == UART_STOP_BYTE)
					{
						buf[buf_counter] = temp;
						buf_counter		 = buf_counter + 1;
						UART_AddToQueue(buf, buf_counter, 0);
						buf_counter		 = 0;
 432:	00 e0       	ldi	r16, 0x00	; 0
 434:	10 e0       	ldi	r17, 0x00	; 0
 436:	60 e0       	ldi	r22, 0x00	; 0
 438:	70 e0       	ldi	r23, 0x00	; 0
 43a:	24 c0       	rjmp	.+72     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
				
				// Add possibility to save to eeprom
				char temp;
				for (int i=0; i < len; i++)
				{
					temp = data[i];
 43c:	e1 e2       	ldi	r30, 0x21	; 33
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	ec 0f       	add	r30, r28
 442:	fd 1f       	adc	r31, r29
 444:	e0 0f       	add	r30, r16
 446:	f1 1f       	adc	r31, r17
 448:	80 81       	ld	r24, Z
					if (temp == UART_STOP_BYTE)
 44a:	8d 30       	cpi	r24, 0x0D	; 13
 44c:	81 f4       	brne	.+32     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
					{
						buf[buf_counter] = temp;
 44e:	e1 e0       	ldi	r30, 0x01	; 1
 450:	f0 e0       	ldi	r31, 0x00	; 0
 452:	ec 0f       	add	r30, r28
 454:	fd 1f       	adc	r31, r29
 456:	e6 0f       	add	r30, r22
 458:	f7 1f       	adc	r31, r23
						buf_counter		 = buf_counter + 1;
 45a:	80 83       	st	Z, r24
 45c:	6f 5f       	subi	r22, 0xFF	; 255
						UART_AddToQueue(buf, buf_counter, 0);
 45e:	7f 4f       	sbci	r23, 0xFF	; 255
 460:	40 e0       	ldi	r20, 0x00	; 0
 462:	ce 01       	movw	r24, r28
 464:	01 96       	adiw	r24, 0x01	; 1
 466:	3f d2       	rcall	.+1150   	; 0x8e6 <UART_AddToQueue>
						buf_counter		 = 0;
 468:	60 e0       	ldi	r22, 0x00	; 0
 46a:	70 e0       	ldi	r23, 0x00	; 0
 46c:	09 c0       	rjmp	.+18     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
					}
					else
					{
						buf[buf_counter] = temp;
 46e:	e1 e0       	ldi	r30, 0x01	; 1
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	ec 0f       	add	r30, r28
 474:	fd 1f       	adc	r31, r29
 476:	e6 0f       	add	r30, r22
 478:	f7 1f       	adc	r31, r23
 47a:	80 83       	st	Z, r24
						buf_counter		 = buf_counter + 1;
 47c:	6f 5f       	subi	r22, 0xFF	; 255
 47e:	7f 4f       	sbci	r23, 0xFF	; 255
				  UART_AddToQueue(buf_sc, 5, 0);	
				}
				
				// Add possibility to save to eeprom
				char temp;
				for (int i=0; i < len; i++)
 480:	0f 5f       	subi	r16, 0xFF	; 255
 482:	1f 4f       	sbci	r17, 0xFF	; 255
 484:	0e 15       	cp	r16, r14
						buf[buf_counter] = temp;
						buf_counter		 = buf_counter + 1;
					}
				}
				
				if (buf_counter != 0)
 486:	1f 05       	cpc	r17, r15
 488:	cc f2       	brlt	.-78     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
				{
					UART_AddToQueue(buf, buf_counter, 0);
 48a:	61 15       	cp	r22, r1
 48c:	71 05       	cpc	r23, r1
 48e:	21 f0       	breq	.+8      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 490:	40 e0       	ldi	r20, 0x00	; 0
 492:	ce 01       	movw	r24, r28
				}
				
				save_eeprom_data(1);
 494:	01 96       	adiw	r24, 0x01	; 1
 496:	27 d2       	rcall	.+1102   	; 0x8e6 <UART_AddToQueue>
 498:	81 e0       	ldi	r24, 0x01	; 1
			}
			
			uart_set_RX_buf_len(1);
 49a:	09 de       	rcall	.-1006   	; 0xae <save_eeprom_data>
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	36 d2       	rcall	.+1132   	; 0x90c <uart_set_RX_buf_len>
			uart1_flags.UART_FLAG = DATA_OPERATION_COMPLETE_FLAG;
 4a0:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <uart1_flags+0x1>
 4a4:	53 cf       	rjmp	.-346    	; 0x34c <main+0x22>

000004a6 <uart_rx_data>:
		// Convert ASCII to the number by lowing the value by '0' (0x30)
		// Add the result by multiplying to 10 for index
		result = result*10 + (charArray[i] - '0');
	}	
	return result;
}
 4a6:	fc 01       	movw	r30, r24
 4a8:	4d 30       	cpi	r20, 0x0D	; 13
 4aa:	f1 f4       	brne	.+60     	; 0x4e8 <uart_rx_data+0x42>
 4ac:	81 81       	ldd	r24, Z+1	; 0x01
 4ae:	df 01       	movw	r26, r30
 4b0:	a8 0f       	add	r26, r24
 4b2:	b1 1d       	adc	r27, r1
 4b4:	12 96       	adiw	r26, 0x02	; 2
 4b6:	4c 93       	st	X, r20
 4b8:	81 81       	ldd	r24, Z+1	; 0x01
 4ba:	8f 5f       	subi	r24, 0xFF	; 255
 4bc:	81 83       	std	Z+1, r24	; 0x01
 4be:	db 01       	movw	r26, r22
 4c0:	1c 92       	st	X, r1
 4c2:	82 e0       	ldi	r24, 0x02	; 2
 4c4:	11 96       	adiw	r26, 0x01	; 1
 4c6:	8c 93       	st	X, r24
 4c8:	81 81       	ldd	r24, Z+1	; 0x01
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	df 01       	movw	r26, r30
 4ce:	ae 57       	subi	r26, 0x7E	; 126
 4d0:	bf 4f       	sbci	r27, 0xFF	; 255
 4d2:	11 96       	adiw	r26, 0x01	; 1
 4d4:	9c 93       	st	X, r25
 4d6:	8e 93       	st	-X, r24
 4d8:	11 82       	std	Z+1, r1	; 0x01
 4da:	82 81       	ldd	r24, Z+2	; 0x02
 4dc:	86 32       	cpi	r24, 0x26	; 38
 4de:	81 f4       	brne	.+32     	; 0x500 <uart_rx_data+0x5a>
 4e0:	85 e0       	ldi	r24, 0x05	; 5
 4e2:	fb 01       	movw	r30, r22
 4e4:	81 83       	std	Z+1, r24	; 0x01
 4e6:	08 95       	ret
 4e8:	82 e0       	ldi	r24, 0x02	; 2
 4ea:	db 01       	movw	r26, r22
 4ec:	8c 93       	st	X, r24
 4ee:	81 81       	ldd	r24, Z+1	; 0x01
 4f0:	df 01       	movw	r26, r30
 4f2:	a8 0f       	add	r26, r24
 4f4:	b1 1d       	adc	r27, r1
 4f6:	12 96       	adiw	r26, 0x02	; 2
 4f8:	4c 93       	st	X, r20
 4fa:	81 81       	ldd	r24, Z+1	; 0x01
 4fc:	8f 5f       	subi	r24, 0xFF	; 255
 4fe:	81 83       	std	Z+1, r24	; 0x01
 500:	08 95       	ret

00000502 <USART_INIT>:
 502:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 506:	33 e3       	ldi	r19, 0x33	; 51
 508:	30 93 c4 00 	sts	0x00C4, r19	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 50c:	22 e2       	ldi	r18, 0x22	; 34
 50e:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 512:	98 e9       	ldi	r25, 0x98	; 152
 514:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 518:	86 e0       	ldi	r24, 0x06	; 6
 51a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 51e:	e2 e0       	ldi	r30, 0x02	; 2
 520:	f1 e0       	ldi	r31, 0x01	; 1
 522:	10 82       	st	Z, r1
 524:	11 82       	std	Z+1, r1	; 0x01
 526:	eb e1       	ldi	r30, 0x1B	; 27
 528:	f3 e0       	ldi	r31, 0x03	; 3
 52a:	10 82       	st	Z, r1
 52c:	11 82       	std	Z+1, r1	; 0x01
 52e:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <uart0_indexes+0x83>
 532:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <uart0_indexes+0x82>
 536:	10 92 21 04 	sts	0x0421, r1	; 0x800421 <uart0_Queue+0x104>
 53a:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <uart0_Queue+0x105>
 53e:	10 92 23 04 	sts	0x0423, r1	; 0x800423 <uart0_Queue+0x106>
 542:	10 92 24 04 	sts	0x0424, r1	; 0x800424 <uart0_Queue+0x107>
 546:	e7 e9       	ldi	r30, 0x97	; 151
 548:	f2 e0       	ldi	r31, 0x02	; 2
 54a:	10 82       	st	Z, r1
 54c:	11 82       	std	Z+1, r1	; 0x01
 54e:	ea e8       	ldi	r30, 0x8A	; 138
 550:	f1 e0       	ldi	r31, 0x01	; 1
 552:	10 82       	st	Z, r1
 554:	11 82       	std	Z+1, r1	; 0x01
 556:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <uart1_indexes+0x83>
 55a:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <uart1_indexes+0x82>
 55e:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <uart1_Queue+0x104>
 562:	10 92 93 02 	sts	0x0293, r1	; 0x800293 <uart1_Queue+0x105>
 566:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <uart1_Queue+0x106>
 56a:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <uart1_Queue+0x107>
 56e:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 572:	30 93 cc 00 	sts	0x00CC, r19	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 576:	20 93 c8 00 	sts	0x00C8, r18	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 57a:	90 93 c9 00 	sts	0x00C9, r25	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
 57e:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
 582:	08 95       	ret

00000584 <__vector_28>:
 584:	1f 92       	push	r1
 586:	0f 92       	push	r0
 588:	0f b6       	in	r0, 0x3f	; 63
 58a:	0f 92       	push	r0
 58c:	11 24       	eor	r1, r1
 58e:	0b b6       	in	r0, 0x3b	; 59
 590:	0f 92       	push	r0
 592:	2f 93       	push	r18
 594:	3f 93       	push	r19
 596:	4f 93       	push	r20
 598:	5f 93       	push	r21
 59a:	6f 93       	push	r22
 59c:	7f 93       	push	r23
 59e:	8f 93       	push	r24
 5a0:	9f 93       	push	r25
 5a2:	af 93       	push	r26
 5a4:	bf 93       	push	r27
 5a6:	ef 93       	push	r30
 5a8:	ff 93       	push	r31
 5aa:	40 91 ce 00 	lds	r20, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 5ae:	6a e8       	ldi	r22, 0x8A	; 138
 5b0:	71 e0       	ldi	r23, 0x01	; 1
 5b2:	87 e9       	ldi	r24, 0x97	; 151
 5b4:	92 e0       	ldi	r25, 0x02	; 2
 5b6:	77 df       	rcall	.-274    	; 0x4a6 <uart_rx_data>
 5b8:	ff 91       	pop	r31
 5ba:	ef 91       	pop	r30
 5bc:	bf 91       	pop	r27
 5be:	af 91       	pop	r26
 5c0:	9f 91       	pop	r25
 5c2:	8f 91       	pop	r24
 5c4:	7f 91       	pop	r23
 5c6:	6f 91       	pop	r22
 5c8:	5f 91       	pop	r21
 5ca:	4f 91       	pop	r20
 5cc:	3f 91       	pop	r19
 5ce:	2f 91       	pop	r18
 5d0:	0f 90       	pop	r0
 5d2:	0b be       	out	0x3b, r0	; 59
 5d4:	0f 90       	pop	r0
 5d6:	0f be       	out	0x3f, r0	; 63
 5d8:	0f 90       	pop	r0
 5da:	1f 90       	pop	r1
 5dc:	18 95       	reti

000005de <__vector_20>:
 5de:	1f 92       	push	r1
 5e0:	0f 92       	push	r0
 5e2:	0f b6       	in	r0, 0x3f	; 63
 5e4:	0f 92       	push	r0
 5e6:	11 24       	eor	r1, r1
 5e8:	0b b6       	in	r0, 0x3b	; 59
 5ea:	0f 92       	push	r0
 5ec:	2f 93       	push	r18
 5ee:	3f 93       	push	r19
 5f0:	4f 93       	push	r20
 5f2:	5f 93       	push	r21
 5f4:	6f 93       	push	r22
 5f6:	7f 93       	push	r23
 5f8:	8f 93       	push	r24
 5fa:	9f 93       	push	r25
 5fc:	af 93       	push	r26
 5fe:	bf 93       	push	r27
 600:	ef 93       	push	r30
 602:	ff 93       	push	r31
 604:	40 91 c6 00 	lds	r20, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 608:	6b e1       	ldi	r22, 0x1B	; 27
 60a:	73 e0       	ldi	r23, 0x03	; 3
 60c:	82 e0       	ldi	r24, 0x02	; 2
 60e:	91 e0       	ldi	r25, 0x01	; 1
 610:	4a df       	rcall	.-364    	; 0x4a6 <uart_rx_data>
 612:	ff 91       	pop	r31
 614:	ef 91       	pop	r30
 616:	bf 91       	pop	r27
 618:	af 91       	pop	r26
 61a:	9f 91       	pop	r25
 61c:	8f 91       	pop	r24
 61e:	7f 91       	pop	r23
 620:	6f 91       	pop	r22
 622:	5f 91       	pop	r21
 624:	4f 91       	pop	r20
 626:	3f 91       	pop	r19
 628:	2f 91       	pop	r18
 62a:	0f 90       	pop	r0
 62c:	0b be       	out	0x3b, r0	; 59
 62e:	0f 90       	pop	r0
 630:	0f be       	out	0x3f, r0	; 63
 632:	0f 90       	pop	r0
 634:	1f 90       	pop	r1
 636:	18 95       	reti

00000638 <__vector_29>:
 638:	1f 92       	push	r1
 63a:	0f 92       	push	r0
 63c:	0f b6       	in	r0, 0x3f	; 63
 63e:	0f 92       	push	r0
 640:	11 24       	eor	r1, r1
 642:	0b b6       	in	r0, 0x3b	; 59
 644:	0f 92       	push	r0
 646:	8f 93       	push	r24
 648:	9f 93       	push	r25
 64a:	af 93       	push	r26
 64c:	bf 93       	push	r27
 64e:	ef 93       	push	r30
 650:	ff 93       	push	r31
 652:	90 91 94 02 	lds	r25, 0x0294	; 0x800294 <uart1_Queue+0x106>
 656:	e0 91 93 02 	lds	r30, 0x0293	; 0x800293 <uart1_Queue+0x105>
 65a:	81 e4       	ldi	r24, 0x41	; 65
 65c:	e8 9f       	mul	r30, r24
 65e:	f0 01       	movw	r30, r0
 660:	11 24       	eor	r1, r1
 662:	e2 53       	subi	r30, 0x32	; 50
 664:	fe 4f       	sbci	r31, 0xFE	; 254
 666:	80 81       	ld	r24, Z
 668:	98 17       	cp	r25, r24
 66a:	a0 f4       	brcc	.+40     	; 0x694 <__vector_29+0x5c>
 66c:	e0 91 93 02 	lds	r30, 0x0293	; 0x800293 <uart1_Queue+0x105>
 670:	a4 e9       	ldi	r26, 0x94	; 148
 672:	b2 e0       	ldi	r27, 0x02	; 2
 674:	8c 91       	ld	r24, X
 676:	91 e0       	ldi	r25, 0x01	; 1
 678:	98 0f       	add	r25, r24
 67a:	9c 93       	st	X, r25
 67c:	91 e4       	ldi	r25, 0x41	; 65
 67e:	e9 9f       	mul	r30, r25
 680:	f0 01       	movw	r30, r0
 682:	11 24       	eor	r1, r1
 684:	e2 57       	subi	r30, 0x72	; 114
 686:	fe 4f       	sbci	r31, 0xFE	; 254
 688:	e8 0f       	add	r30, r24
 68a:	f1 1d       	adc	r31, r1
 68c:	80 81       	ld	r24, Z
 68e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 692:	2c c0       	rjmp	.+88     	; 0x6ec <__vector_29+0xb4>
 694:	e3 e9       	ldi	r30, 0x93	; 147
 696:	f2 e0       	ldi	r31, 0x02	; 2
 698:	80 81       	ld	r24, Z
 69a:	8f 5f       	subi	r24, 0xFF	; 255
 69c:	80 83       	st	Z, r24
 69e:	80 81       	ld	r24, Z
 6a0:	8f 73       	andi	r24, 0x3F	; 63
 6a2:	80 83       	st	Z, r24
 6a4:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <uart1_Queue+0x106>
 6a8:	90 81       	ld	r25, Z
 6aa:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <uart1_Queue+0x104>
 6ae:	98 13       	cpse	r25, r24
 6b0:	0a c0       	rjmp	.+20     	; 0x6c6 <__vector_29+0x8e>
 6b2:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <uart1_Queue+0x107>
 6b6:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <uart1_Queue+0x108>
 6ba:	e9 ec       	ldi	r30, 0xC9	; 201
 6bc:	f0 e0       	ldi	r31, 0x00	; 0
 6be:	80 81       	ld	r24, Z
 6c0:	8f 7d       	andi	r24, 0xDF	; 223
 6c2:	80 83       	st	Z, r24
 6c4:	13 c0       	rjmp	.+38     	; 0x6ec <__vector_29+0xb4>
 6c6:	e0 91 93 02 	lds	r30, 0x0293	; 0x800293 <uart1_Queue+0x105>
 6ca:	a4 e9       	ldi	r26, 0x94	; 148
 6cc:	b2 e0       	ldi	r27, 0x02	; 2
 6ce:	8c 91       	ld	r24, X
 6d0:	91 e0       	ldi	r25, 0x01	; 1
 6d2:	98 0f       	add	r25, r24
 6d4:	9c 93       	st	X, r25
 6d6:	91 e4       	ldi	r25, 0x41	; 65
 6d8:	e9 9f       	mul	r30, r25
 6da:	f0 01       	movw	r30, r0
 6dc:	11 24       	eor	r1, r1
 6de:	e2 57       	subi	r30, 0x72	; 114
 6e0:	fe 4f       	sbci	r31, 0xFE	; 254
 6e2:	e8 0f       	add	r30, r24
 6e4:	f1 1d       	adc	r31, r1
 6e6:	80 81       	ld	r24, Z
 6e8:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 6ec:	ff 91       	pop	r31
 6ee:	ef 91       	pop	r30
 6f0:	bf 91       	pop	r27
 6f2:	af 91       	pop	r26
 6f4:	9f 91       	pop	r25
 6f6:	8f 91       	pop	r24
 6f8:	0f 90       	pop	r0
 6fa:	0b be       	out	0x3b, r0	; 59
 6fc:	0f 90       	pop	r0
 6fe:	0f be       	out	0x3f, r0	; 63
 700:	0f 90       	pop	r0
 702:	1f 90       	pop	r1
 704:	18 95       	reti

00000706 <__vector_21>:
 706:	1f 92       	push	r1
 708:	0f 92       	push	r0
 70a:	0f b6       	in	r0, 0x3f	; 63
 70c:	0f 92       	push	r0
 70e:	11 24       	eor	r1, r1
 710:	0b b6       	in	r0, 0x3b	; 59
 712:	0f 92       	push	r0
 714:	8f 93       	push	r24
 716:	9f 93       	push	r25
 718:	af 93       	push	r26
 71a:	bf 93       	push	r27
 71c:	ef 93       	push	r30
 71e:	ff 93       	push	r31
 720:	90 91 23 04 	lds	r25, 0x0423	; 0x800423 <uart0_Queue+0x106>
 724:	e0 91 22 04 	lds	r30, 0x0422	; 0x800422 <uart0_Queue+0x105>
 728:	81 e4       	ldi	r24, 0x41	; 65
 72a:	e8 9f       	mul	r30, r24
 72c:	f0 01       	movw	r30, r0
 72e:	11 24       	eor	r1, r1
 730:	e3 5a       	subi	r30, 0xA3	; 163
 732:	fc 4f       	sbci	r31, 0xFC	; 252
 734:	80 81       	ld	r24, Z
 736:	98 17       	cp	r25, r24
 738:	a0 f4       	brcc	.+40     	; 0x762 <__vector_21+0x5c>
 73a:	e0 91 22 04 	lds	r30, 0x0422	; 0x800422 <uart0_Queue+0x105>
 73e:	a3 e2       	ldi	r26, 0x23	; 35
 740:	b4 e0       	ldi	r27, 0x04	; 4
 742:	8c 91       	ld	r24, X
 744:	91 e0       	ldi	r25, 0x01	; 1
 746:	98 0f       	add	r25, r24
 748:	9c 93       	st	X, r25
 74a:	91 e4       	ldi	r25, 0x41	; 65
 74c:	e9 9f       	mul	r30, r25
 74e:	f0 01       	movw	r30, r0
 750:	11 24       	eor	r1, r1
 752:	e3 5e       	subi	r30, 0xE3	; 227
 754:	fc 4f       	sbci	r31, 0xFC	; 252
 756:	e8 0f       	add	r30, r24
 758:	f1 1d       	adc	r31, r1
 75a:	80 81       	ld	r24, Z
 75c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 760:	2c c0       	rjmp	.+88     	; 0x7ba <__vector_21+0xb4>
 762:	e2 e2       	ldi	r30, 0x22	; 34
 764:	f4 e0       	ldi	r31, 0x04	; 4
 766:	80 81       	ld	r24, Z
 768:	8f 5f       	subi	r24, 0xFF	; 255
 76a:	80 83       	st	Z, r24
 76c:	80 81       	ld	r24, Z
 76e:	8f 73       	andi	r24, 0x3F	; 63
 770:	80 83       	st	Z, r24
 772:	10 92 23 04 	sts	0x0423, r1	; 0x800423 <uart0_Queue+0x106>
 776:	90 81       	ld	r25, Z
 778:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <uart0_Queue+0x104>
 77c:	98 13       	cpse	r25, r24
 77e:	0a c0       	rjmp	.+20     	; 0x794 <__vector_21+0x8e>
 780:	10 92 24 04 	sts	0x0424, r1	; 0x800424 <uart0_Queue+0x107>
 784:	10 92 25 04 	sts	0x0425, r1	; 0x800425 <uart0_Queue+0x108>
 788:	e1 ec       	ldi	r30, 0xC1	; 193
 78a:	f0 e0       	ldi	r31, 0x00	; 0
 78c:	80 81       	ld	r24, Z
 78e:	8f 7d       	andi	r24, 0xDF	; 223
 790:	80 83       	st	Z, r24
 792:	13 c0       	rjmp	.+38     	; 0x7ba <__vector_21+0xb4>
 794:	e0 91 22 04 	lds	r30, 0x0422	; 0x800422 <uart0_Queue+0x105>
 798:	a3 e2       	ldi	r26, 0x23	; 35
 79a:	b4 e0       	ldi	r27, 0x04	; 4
 79c:	8c 91       	ld	r24, X
 79e:	91 e0       	ldi	r25, 0x01	; 1
 7a0:	98 0f       	add	r25, r24
 7a2:	9c 93       	st	X, r25
 7a4:	91 e4       	ldi	r25, 0x41	; 65
 7a6:	e9 9f       	mul	r30, r25
 7a8:	f0 01       	movw	r30, r0
 7aa:	11 24       	eor	r1, r1
 7ac:	e3 5e       	subi	r30, 0xE3	; 227
 7ae:	fc 4f       	sbci	r31, 0xFC	; 252
 7b0:	e8 0f       	add	r30, r24
 7b2:	f1 1d       	adc	r31, r1
 7b4:	80 81       	ld	r24, Z
 7b6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 7ba:	ff 91       	pop	r31
 7bc:	ef 91       	pop	r30
 7be:	bf 91       	pop	r27
 7c0:	af 91       	pop	r26
 7c2:	9f 91       	pop	r25
 7c4:	8f 91       	pop	r24
 7c6:	0f 90       	pop	r0
 7c8:	0b be       	out	0x3b, r0	; 59
 7ca:	0f 90       	pop	r0
 7cc:	0f be       	out	0x3f, r0	; 63
 7ce:	0f 90       	pop	r0
 7d0:	1f 90       	pop	r1
 7d2:	18 95       	reti

000007d4 <choose_uart>:
 7d4:	cf 92       	push	r12
 7d6:	df 92       	push	r13
 7d8:	ef 92       	push	r14
 7da:	ff 92       	push	r15
 7dc:	0f 93       	push	r16
 7de:	cf 93       	push	r28
 7e0:	df 93       	push	r29
 7e2:	ec 01       	movw	r28, r24
 7e4:	7a 01       	movw	r14, r20
 7e6:	f9 01       	movw	r30, r18
 7e8:	ec 5f       	subi	r30, 0xFC	; 252
 7ea:	fe 4f       	sbci	r31, 0xFE	; 254
 7ec:	c0 80       	ld	r12, Z
 7ee:	d1 2c       	mov	r13, r1
 7f0:	4f ef       	ldi	r20, 0xFF	; 255
 7f2:	c4 1a       	sub	r12, r20
 7f4:	d4 0a       	sbc	r13, r20
 7f6:	8f e3       	ldi	r24, 0x3F	; 63
 7f8:	c8 22       	and	r12, r24
 7fa:	dd 24       	eor	r13, r13
 7fc:	90 81       	ld	r25, Z
 7fe:	31 96       	adiw	r30, 0x01	; 1
 800:	80 81       	ld	r24, Z
 802:	98 17       	cp	r25, r24
 804:	28 f4       	brcc	.+10     	; 0x810 <choose_uart+0x3c>
 806:	80 81       	ld	r24, Z
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	c8 16       	cp	r12, r24
 80c:	d9 06       	cpc	r13, r25
 80e:	19 f0       	breq	.+6      	; 0x816 <choose_uart+0x42>
 810:	e0 e0       	ldi	r30, 0x00	; 0
 812:	f0 e0       	ldi	r31, 0x00	; 0
 814:	1e c0       	rjmp	.+60     	; 0x852 <choose_uart+0x7e>
 816:	81 e0       	ldi	r24, 0x01	; 1
 818:	f9 01       	movw	r30, r18
 81a:	e8 5f       	subi	r30, 0xF8	; 248
 81c:	fe 4f       	sbci	r31, 0xFE	; 254
 81e:	80 83       	st	Z, r24
 820:	f9 01       	movw	r30, r18
 822:	e8 5f       	subi	r30, 0xF8	; 248
 824:	fe 4f       	sbci	r31, 0xFE	; 254
 826:	80 81       	ld	r24, Z
 828:	81 11       	cpse	r24, r1
 82a:	fa cf       	rjmp	.-12     	; 0x820 <choose_uart+0x4c>
 82c:	f1 cf       	rjmp	.-30     	; 0x810 <choose_uart+0x3c>
 82e:	d9 01       	movw	r26, r18
 830:	ac 5f       	subi	r26, 0xFC	; 252
 832:	be 4f       	sbci	r27, 0xFE	; 254
 834:	5c 91       	ld	r21, X
 836:	de 01       	movw	r26, r28
 838:	ae 0f       	add	r26, r30
 83a:	bf 1f       	adc	r27, r31
 83c:	9c 91       	ld	r25, X
 83e:	d9 01       	movw	r26, r18
 840:	41 e4       	ldi	r20, 0x41	; 65
 842:	54 9f       	mul	r21, r20
 844:	a0 0d       	add	r26, r0
 846:	b1 1d       	adc	r27, r1
 848:	11 24       	eor	r1, r1
 84a:	ae 0f       	add	r26, r30
 84c:	bf 1f       	adc	r27, r31
 84e:	9c 93       	st	X, r25
 850:	31 96       	adiw	r30, 0x01	; 1
 852:	e6 17       	cp	r30, r22
 854:	f7 07       	cpc	r31, r23
 856:	58 f3       	brcs	.-42     	; 0x82e <choose_uart+0x5a>
 858:	d9 01       	movw	r26, r18
 85a:	ac 5f       	subi	r26, 0xFC	; 252
 85c:	be 4f       	sbci	r27, 0xFE	; 254
 85e:	8c 91       	ld	r24, X
 860:	f9 01       	movw	r30, r18
 862:	91 e4       	ldi	r25, 0x41	; 65
 864:	89 9f       	mul	r24, r25
 866:	e0 0d       	add	r30, r0
 868:	f1 1d       	adc	r31, r1
 86a:	11 24       	eor	r1, r1
 86c:	e0 5c       	subi	r30, 0xC0	; 192
 86e:	ff 4f       	sbci	r31, 0xFF	; 255
 870:	60 83       	st	Z, r22
 872:	cc 92       	st	X, r12
 874:	f9 01       	movw	r30, r18
 876:	e9 5f       	subi	r30, 0xF9	; 249
 878:	fe 4f       	sbci	r31, 0xFE	; 254
 87a:	80 81       	ld	r24, Z
 87c:	81 11       	cpse	r24, r1
 87e:	2b c0       	rjmp	.+86     	; 0x8d6 <choose_uart+0x102>
 880:	f7 01       	movw	r30, r14
 882:	80 81       	ld	r24, Z
 884:	81 11       	cpse	r24, r1
 886:	27 c0       	rjmp	.+78     	; 0x8d6 <choose_uart+0x102>
 888:	f9 01       	movw	r30, r18
 88a:	e9 5f       	subi	r30, 0xF9	; 249
 88c:	fe 4f       	sbci	r31, 0xFE	; 254
 88e:	81 e0       	ldi	r24, 0x01	; 1
 890:	80 83       	st	Z, r24
 892:	31 97       	sbiw	r30, 0x01	; 1
 894:	10 82       	st	Z, r1
 896:	11 96       	adiw	r26, 0x01	; 1
 898:	9c 91       	ld	r25, X
 89a:	80 81       	ld	r24, Z
 89c:	41 e0       	ldi	r20, 0x01	; 1
 89e:	48 0f       	add	r20, r24
 8a0:	40 83       	st	Z, r20
 8a2:	f1 e4       	ldi	r31, 0x41	; 65
 8a4:	9f 9f       	mul	r25, r31
 8a6:	20 0d       	add	r18, r0
 8a8:	31 1d       	adc	r19, r1
 8aa:	11 24       	eor	r1, r1
 8ac:	f9 01       	movw	r30, r18
 8ae:	e8 0f       	add	r30, r24
 8b0:	f1 1d       	adc	r31, r1
 8b2:	80 81       	ld	r24, Z
 8b4:	01 11       	cpse	r16, r1
 8b6:	08 c0       	rjmp	.+16     	; 0x8c8 <choose_uart+0xf4>
 8b8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 8bc:	e1 ec       	ldi	r30, 0xC1	; 193
 8be:	f0 e0       	ldi	r31, 0x00	; 0
 8c0:	80 81       	ld	r24, Z
 8c2:	80 62       	ori	r24, 0x20	; 32
 8c4:	80 83       	st	Z, r24
 8c6:	07 c0       	rjmp	.+14     	; 0x8d6 <choose_uart+0x102>
 8c8:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 8cc:	e9 ec       	ldi	r30, 0xC9	; 201
 8ce:	f0 e0       	ldi	r31, 0x00	; 0
 8d0:	80 81       	ld	r24, Z
 8d2:	80 62       	ori	r24, 0x20	; 32
 8d4:	80 83       	st	Z, r24
 8d6:	df 91       	pop	r29
 8d8:	cf 91       	pop	r28
 8da:	0f 91       	pop	r16
 8dc:	ff 90       	pop	r15
 8de:	ef 90       	pop	r14
 8e0:	df 90       	pop	r13
 8e2:	cf 90       	pop	r12
 8e4:	08 95       	ret

000008e6 <UART_AddToQueue>:
 8e6:	0f 93       	push	r16
 8e8:	41 11       	cpse	r20, r1
 8ea:	07 c0       	rjmp	.+14     	; 0x8fa <UART_AddToQueue+0x14>
 8ec:	00 e0       	ldi	r16, 0x00	; 0
 8ee:	2d e1       	ldi	r18, 0x1D	; 29
 8f0:	33 e0       	ldi	r19, 0x03	; 3
 8f2:	4b e1       	ldi	r20, 0x1B	; 27
 8f4:	53 e0       	ldi	r21, 0x03	; 3
 8f6:	6e df       	rcall	.-292    	; 0x7d4 <choose_uart>
 8f8:	06 c0       	rjmp	.+12     	; 0x906 <UART_AddToQueue+0x20>
 8fa:	01 e0       	ldi	r16, 0x01	; 1
 8fc:	2e e8       	ldi	r18, 0x8E	; 142
 8fe:	31 e0       	ldi	r19, 0x01	; 1
 900:	4a e8       	ldi	r20, 0x8A	; 138
 902:	51 e0       	ldi	r21, 0x01	; 1
 904:	67 df       	rcall	.-306    	; 0x7d4 <choose_uart>
 906:	81 e0       	ldi	r24, 0x01	; 1
 908:	0f 91       	pop	r16
 90a:	08 95       	ret

0000090c <uart_set_RX_buf_len>:
*/

void uart_set_RX_buf_len(char uart_index)
{
	Indexes* uart_indexes;	
	if (uart_index == 0)
 90c:	81 11       	cpse	r24, r1
 90e:	03 c0       	rjmp	.+6      	; 0x916 <uart_set_RX_buf_len+0xa>
	{
		uart_indexes = &uart0_indexes; 
 910:	e2 e0       	ldi	r30, 0x02	; 2
 912:	f1 e0       	ldi	r31, 0x01	; 1
 914:	02 c0       	rjmp	.+4      	; 0x91a <uart_set_RX_buf_len+0xe>
	}
	else
	{
		uart_indexes = &uart1_indexes;
 916:	e7 e9       	ldi	r30, 0x97	; 151
 918:	f2 e0       	ldi	r31, 0x02	; 2
	}
	uart_indexes->rx_msg_len = 0;
 91a:	ee 57       	subi	r30, 0x7E	; 126
 91c:	ff 4f       	sbci	r31, 0xFF	; 255
 91e:	11 82       	std	Z+1, r1	; 0x01
 920:	10 82       	st	Z, r1
 922:	08 95       	ret

00000924 <uart_return_RX_buf>:
}

int uart_return_RX_buf(unsigned char* data, char uart_index)
{
 924:	0f 93       	push	r16
 926:	1f 93       	push	r17
 928:	cf 93       	push	r28
 92a:	df 93       	push	r29
 92c:	cd b7       	in	r28, 0x3d	; 61
 92e:	de b7       	in	r29, 0x3e	; 62
 930:	c4 58       	subi	r28, 0x84	; 132
 932:	d1 09       	sbc	r29, r1
 934:	0f b6       	in	r0, 0x3f	; 63
 936:	f8 94       	cli
 938:	de bf       	out	0x3e, r29	; 62
 93a:	0f be       	out	0x3f, r0	; 63
 93c:	cd bf       	out	0x3d, r28	; 61
 93e:	8c 01       	movw	r16, r24
	Indexes uart_indexes;	
	if (uart_index == 0)
 940:	61 11       	cpse	r22, r1
 942:	0c c0       	rjmp	.+24     	; 0x95c <uart_return_RX_buf+0x38>
	{
		uart_indexes = uart0_indexes; 
 944:	84 e8       	ldi	r24, 0x84	; 132
 946:	e2 e0       	ldi	r30, 0x02	; 2
 948:	f1 e0       	ldi	r31, 0x01	; 1
 94a:	de 01       	movw	r26, r28
 94c:	11 96       	adiw	r26, 0x01	; 1
 94e:	01 90       	ld	r0, Z+
 950:	0d 92       	st	X+, r0
 952:	8a 95       	dec	r24
 954:	e1 f7       	brne	.-8      	; 0x94e <uart_return_RX_buf+0x2a>
	}
	uart_indexes->rx_msg_len = 0;
}

int uart_return_RX_buf(unsigned char* data, char uart_index)
{
 956:	20 e0       	ldi	r18, 0x00	; 0
 958:	30 e0       	ldi	r19, 0x00	; 0
 95a:	17 c0       	rjmp	.+46     	; 0x98a <uart_return_RX_buf+0x66>
	{
		uart_indexes = uart0_indexes; 
	}
	else
	{
		uart_indexes = uart1_indexes;
 95c:	84 e8       	ldi	r24, 0x84	; 132
 95e:	e7 e9       	ldi	r30, 0x97	; 151
 960:	f2 e0       	ldi	r31, 0x02	; 2
 962:	de 01       	movw	r26, r28
 964:	11 96       	adiw	r26, 0x01	; 1
 966:	01 90       	ld	r0, Z+
 968:	0d 92       	st	X+, r0
 96a:	8a 95       	dec	r24
 96c:	e1 f7       	brne	.-8      	; 0x966 <uart_return_RX_buf+0x42>
 96e:	f3 cf       	rjmp	.-26     	; 0x956 <uart_return_RX_buf+0x32>
	}
	
	for (int i = 0; i < uart_indexes.rx_msg_len; i++) 
	{
		data[i] = uart_indexes.UART_RX_BUFFER[i]; 
 970:	d8 01       	movw	r26, r16
 972:	a2 0f       	add	r26, r18
 974:	b3 1f       	adc	r27, r19
 976:	e3 e0       	ldi	r30, 0x03	; 3
 978:	f0 e0       	ldi	r31, 0x00	; 0
 97a:	ec 0f       	add	r30, r28
 97c:	fd 1f       	adc	r31, r29
 97e:	e2 0f       	add	r30, r18
 980:	f3 1f       	adc	r31, r19
 982:	90 81       	ld	r25, Z
 984:	9c 93       	st	X, r25
	else
	{
		uart_indexes = uart1_indexes;
	}
	
	for (int i = 0; i < uart_indexes.rx_msg_len; i++) 
 986:	2f 5f       	subi	r18, 0xFF	; 255
 988:	3f 4f       	sbci	r19, 0xFF	; 255
 98a:	cd 57       	subi	r28, 0x7D	; 125
 98c:	df 4f       	sbci	r29, 0xFF	; 255
 98e:	48 81       	ld	r20, Y
 990:	59 81       	ldd	r21, Y+1	; 0x01
 992:	c3 58       	subi	r28, 0x83	; 131
 994:	d0 40       	sbci	r29, 0x00	; 0
 996:	24 17       	cp	r18, r20
 998:	35 07       	cpc	r19, r21
 99a:	54 f3       	brlt	.-44     	; 0x970 <uart_return_RX_buf+0x4c>
	{
		data[i] = uart_indexes.UART_RX_BUFFER[i]; 
	}
	
	return uart_indexes.rx_msg_len;
 99c:	cd 57       	subi	r28, 0x7D	; 125
 99e:	df 4f       	sbci	r29, 0xFF	; 255
 9a0:	88 81       	ld	r24, Y
 9a2:	99 81       	ldd	r25, Y+1	; 0x01
 9a4:	c3 58       	subi	r28, 0x83	; 131
 9a6:	d0 40       	sbci	r29, 0x00	; 0
 9a8:	cc 57       	subi	r28, 0x7C	; 124
 9aa:	df 4f       	sbci	r29, 0xFF	; 255
 9ac:	0f b6       	in	r0, 0x3f	; 63
 9ae:	f8 94       	cli
 9b0:	de bf       	out	0x3e, r29	; 62
 9b2:	0f be       	out	0x3f, r0	; 63
 9b4:	cd bf       	out	0x3d, r28	; 61
 9b6:	df 91       	pop	r29
 9b8:	cf 91       	pop	r28
 9ba:	1f 91       	pop	r17
 9bc:	0f 91       	pop	r16
 9be:	08 95       	ret

000009c0 <eeprom_read_byte>:
 9c0:	f9 99       	sbic	0x1f, 1	; 31
 9c2:	fe cf       	rjmp	.-4      	; 0x9c0 <eeprom_read_byte>
 9c4:	92 bd       	out	0x22, r25	; 34
 9c6:	81 bd       	out	0x21, r24	; 33
 9c8:	f8 9a       	sbi	0x1f, 0	; 31
 9ca:	99 27       	eor	r25, r25
 9cc:	80 b5       	in	r24, 0x20	; 32
 9ce:	08 95       	ret

000009d0 <eeprom_write_byte>:
 9d0:	26 2f       	mov	r18, r22

000009d2 <eeprom_write_r18>:
 9d2:	f9 99       	sbic	0x1f, 1	; 31
 9d4:	fe cf       	rjmp	.-4      	; 0x9d2 <eeprom_write_r18>
 9d6:	1f ba       	out	0x1f, r1	; 31
 9d8:	92 bd       	out	0x22, r25	; 34
 9da:	81 bd       	out	0x21, r24	; 33
 9dc:	20 bd       	out	0x20, r18	; 32
 9de:	0f b6       	in	r0, 0x3f	; 63
 9e0:	f8 94       	cli
 9e2:	fa 9a       	sbi	0x1f, 2	; 31
 9e4:	f9 9a       	sbi	0x1f, 1	; 31
 9e6:	0f be       	out	0x3f, r0	; 63
 9e8:	01 96       	adiw	r24, 0x01	; 1
 9ea:	08 95       	ret

000009ec <_exit>:
 9ec:	f8 94       	cli

000009ee <__stop_program>:
 9ee:	ff cf       	rjmp	.-2      	; 0x9ee <__stop_program>
