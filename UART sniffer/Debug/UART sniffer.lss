
UART sniffer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000009e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000972  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001a8  00800100  00800100  000009e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000a58  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015fc  00000000  00000000  00000b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b29  00000000  00000000  0000214c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a66  00000000  00000000  00002c75  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000304  00000000  00000000  000036dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006f6  00000000  00000000  000039e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bf0  00000000  00000000  000040d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00004cc6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	93 c2       	rjmp	.+1318   	; 0x578 <__vector_20>
  52:	00 00       	nop
  54:	25 c3       	rjmp	.+1610   	; 0x6a0 <__vector_21>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	56 c2       	rjmp	.+1196   	; 0x51e <__vector_28>
  72:	00 00       	nop
  74:	ae c2       	rjmp	.+1372   	; 0x5d2 <__vector_29>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	22 e0       	ldi	r18, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a8 3a       	cpi	r26, 0xA8	; 168
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	3b d1       	rcall	.+630    	; 0x320 <main>
  aa:	61 c4       	rjmp	.+2242   	; 0x96e <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <save_eeprom_data>:
volatile long data_addr;



void save_eeprom_data()
{
  ae:	cf 92       	push	r12
  b0:	df 92       	push	r13
  b2:	ef 92       	push	r14
  b4:	ff 92       	push	r15
  b6:	0f 93       	push	r16
  b8:	1f 93       	push	r17
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
  c2:	a0 97       	sbiw	r28, 0x20	; 32
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	f8 94       	cli
  c8:	de bf       	out	0x3e, r29	; 62
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	cd bf       	out	0x3d, r28	; 61
	if (data_addr == 0)
  ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  d6:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
  da:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
  de:	89 2b       	or	r24, r25
  e0:	8a 2b       	or	r24, r26
  e2:	8b 2b       	or	r24, r27
  e4:	09 f0       	breq	.+2      	; 0xe8 <save_eeprom_data+0x3a>
  e6:	42 c0       	rjmp	.+132    	; 0x16c <save_eeprom_data+0xbe>
	{
		// write data length
		unsigned char data[32];
		int len;
		
		len = uart_return_RX_buf(data, 0);				
  e8:	60 e0       	ldi	r22, 0x00	; 0
  ea:	ce 01       	movw	r24, r28
  ec:	01 96       	adiw	r24, 0x01	; 1
  ee:	df d3       	rcall	.+1982   	; 0x8ae <uart_return_RX_buf>
  f0:	7c 01       	movw	r14, r24
		data_addr = len;		
  f2:	09 2e       	mov	r0, r25
  f4:	00 0c       	add	r0, r0
  f6:	aa 0b       	sbc	r26, r26
  f8:	bb 0b       	sbc	r27, r27
  fa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  fe:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 102:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 106:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
						
		// Zero length of the buff
		uart_set_RX_buf_len(0);
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	cb d3       	rcall	.+1942   	; 0x8a4 <uart_set_RX_buf_len>
		
		// Saves length of the data		
		eeprom_write_byte((uint8_t*)0, data_addr >> 8);
 10e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 112:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 116:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 11a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 11e:	69 2f       	mov	r22, r25
 120:	7a 2f       	mov	r23, r26
 122:	8b 2f       	mov	r24, r27
 124:	99 27       	eor	r25, r25
 126:	87 fd       	sbrc	r24, 7
 128:	9a 95       	dec	r25
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	11 d4       	rcall	.+2082   	; 0x952 <eeprom_write_byte>
		eeprom_write_byte((uint8_t*)1, data_addr	   );
 130:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 134:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 138:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 13c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	06 d4       	rcall	.+2060   	; 0x952 <eeprom_write_byte>
		
		//DEBUG
		//UART_AddToQueue(data, len);
		
		// Add data to the eeprom
		for (int i=0; i < len; i++)
 146:	00 e0       	ldi	r16, 0x00	; 0
 148:	10 e0       	ldi	r17, 0x00	; 0
 14a:	0c c0       	rjmp	.+24     	; 0x164 <save_eeprom_data+0xb6>
		{
			eeprom_write_byte((uint8_t*) (2+i), data[i]);
 14c:	e1 e0       	ldi	r30, 0x01	; 1
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	ec 0f       	add	r30, r28
 152:	fd 1f       	adc	r31, r29
 154:	e0 0f       	add	r30, r16
 156:	f1 1f       	adc	r31, r17
 158:	60 81       	ld	r22, Z
 15a:	c8 01       	movw	r24, r16
 15c:	02 96       	adiw	r24, 0x02	; 2
 15e:	f9 d3       	rcall	.+2034   	; 0x952 <eeprom_write_byte>
		
		//DEBUG
		//UART_AddToQueue(data, len);
		
		// Add data to the eeprom
		for (int i=0; i < len; i++)
 160:	0f 5f       	subi	r16, 0xFF	; 255
 162:	1f 4f       	sbci	r17, 0xFF	; 255
 164:	0e 15       	cp	r16, r14
 166:	1f 05       	cpc	r17, r15
 168:	8c f3       	brlt	.-30     	; 0x14c <save_eeprom_data+0x9e>
		// I need only to re-write it 
		
		unsigned int offset;
		
		// Read length of previous data
		offset      = eeprom_read_byte((uint8_t*)0);
 16a:	4f c0       	rjmp	.+158    	; 0x20a <save_eeprom_data+0x15c>
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	e8 d3       	rcall	.+2000   	; 0x942 <eeprom_read_byte>
 172:	e8 2e       	mov	r14, r24
		offset      = offset << 8;
 174:	f1 2c       	mov	r15, r1
 176:	fe 2c       	mov	r15, r14
		offset	    = offset + eeprom_read_byte((uint8_t*)1);
 178:	ee 24       	eor	r14, r14
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	e1 d3       	rcall	.+1986   	; 0x942 <eeprom_read_byte>
 180:	e8 0e       	add	r14, r24
		
		unsigned char data[32];
		int len;
		
		len         = uart_return_RX_buf(data, 0);
 182:	f1 1c       	adc	r15, r1
 184:	60 e0       	ldi	r22, 0x00	; 0
 186:	ce 01       	movw	r24, r28
 188:	01 96       	adiw	r24, 0x01	; 1
 18a:	91 d3       	rcall	.+1826   	; 0x8ae <uart_return_RX_buf>
 18c:	6c 01       	movw	r12, r24
		data_addr   = offset + len;
 18e:	8e 0d       	add	r24, r14
 190:	9f 1d       	adc	r25, r15
 192:	a0 e0       	ldi	r26, 0x00	; 0
 194:	b0 e0       	ldi	r27, 0x00	; 0
 196:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 19a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 19e:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1a2:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
		
		// Zero length of the buff
		uart_set_RX_buf_len(0);
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	7d d3       	rcall	.+1786   	; 0x8a4 <uart_set_RX_buf_len>
		
		// Set new length of the data
		eeprom_write_byte((uint8_t*)0, data_addr >> 8);
 1aa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ae:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1b2:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1b6:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1ba:	69 2f       	mov	r22, r25
 1bc:	7a 2f       	mov	r23, r26
 1be:	8b 2f       	mov	r24, r27
 1c0:	99 27       	eor	r25, r25
 1c2:	87 fd       	sbrc	r24, 7
 1c4:	9a 95       	dec	r25
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	c3 d3       	rcall	.+1926   	; 0x952 <eeprom_write_byte>
		eeprom_write_byte((uint8_t*)1, data_addr	   );
 1cc:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1d0:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1d4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1d8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	b8 d3       	rcall	.+1904   	; 0x952 <eeprom_write_byte>
		
		// DEBUG
		//UART_AddToQueue(buf, temp_len);
				
		for (int i=0; i < len; i++)
 1e2:	00 e0       	ldi	r16, 0x00	; 0
 1e4:	10 e0       	ldi	r17, 0x00	; 0
 1e6:	0e c0       	rjmp	.+28     	; 0x204 <save_eeprom_data+0x156>
		{
			eeprom_write_byte((uint8_t*) (2+i+offset), data[i]);
 1e8:	c8 01       	movw	r24, r16
 1ea:	8e 0d       	add	r24, r14
 1ec:	9f 1d       	adc	r25, r15
 1ee:	e1 e0       	ldi	r30, 0x01	; 1
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	ec 0f       	add	r30, r28
 1f4:	fd 1f       	adc	r31, r29
 1f6:	e0 0f       	add	r30, r16
 1f8:	f1 1f       	adc	r31, r17
 1fa:	60 81       	ld	r22, Z
 1fc:	02 96       	adiw	r24, 0x02	; 2
 1fe:	a9 d3       	rcall	.+1874   	; 0x952 <eeprom_write_byte>
		eeprom_write_byte((uint8_t*)1, data_addr	   );
		
		// DEBUG
		//UART_AddToQueue(buf, temp_len);
				
		for (int i=0; i < len; i++)
 200:	0f 5f       	subi	r16, 0xFF	; 255
 202:	1f 4f       	sbci	r17, 0xFF	; 255
 204:	0c 15       	cp	r16, r12
 206:	1d 05       	cpc	r17, r13
 208:	7c f3       	brlt	.-34     	; 0x1e8 <save_eeprom_data+0x13a>
		{
			eeprom_write_byte((uint8_t*) (2+i+offset), data[i]);
		}
	}
}
 20a:	a0 96       	adiw	r28, 0x20	; 32
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	f8 94       	cli
 210:	de bf       	out	0x3e, r29	; 62
 212:	0f be       	out	0x3f, r0	; 63
 214:	cd bf       	out	0x3d, r28	; 61
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	1f 91       	pop	r17
 21c:	0f 91       	pop	r16
 21e:	ff 90       	pop	r15
 220:	ef 90       	pop	r14
 222:	df 90       	pop	r13
 224:	cf 90       	pop	r12
 226:	08 95       	ret

00000228 <send_eeprom_data>:


void send_eeprom_data()
{
 228:	8f 92       	push	r8
 22a:	9f 92       	push	r9
 22c:	af 92       	push	r10
 22e:	bf 92       	push	r11
 230:	ef 92       	push	r14
 232:	ff 92       	push	r15
 234:	0f 93       	push	r16
 236:	1f 93       	push	r17
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	cd b7       	in	r28, 0x3d	; 61
 23e:	de b7       	in	r29, 0x3e	; 62
 240:	a0 97       	sbiw	r28, 0x20	; 32
 242:	0f b6       	in	r0, 0x3f	; 63
 244:	f8 94       	cli
 246:	de bf       	out	0x3e, r29	; 62
 248:	0f be       	out	0x3f, r0	; 63
 24a:	cd bf       	out	0x3d, r28	; 61
	long data_length;
	
	data_length = eeprom_read_byte((uint8_t*)0);
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	78 d3       	rcall	.+1776   	; 0x942 <eeprom_read_byte>
 252:	88 2e       	mov	r8, r24
 254:	91 2c       	mov	r9, r1
 256:	a1 2c       	mov	r10, r1
 258:	b1 2c       	mov	r11, r1
	data_length = data_length << 8;
 25a:	ba 2c       	mov	r11, r10
 25c:	a9 2c       	mov	r10, r9
 25e:	98 2c       	mov	r9, r8
 260:	88 24       	eor	r8, r8
	data_length = data_length + eeprom_read_byte((uint8_t*)1);
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	6d d3       	rcall	.+1754   	; 0x942 <eeprom_read_byte>
 268:	88 0e       	add	r8, r24
 26a:	91 1c       	adc	r9, r1
 26c:	a1 1c       	adc	r10, r1
 26e:	b1 1c       	adc	r11, r1
	
	if (data_length > 0)
 270:	18 14       	cp	r1, r8
 272:	19 04       	cpc	r1, r9
 274:	1a 04       	cpc	r1, r10
 276:	1b 04       	cpc	r1, r11
 278:	24 f1       	brlt	.+72     	; 0x2c2 <send_eeprom_data+0x9a>
 27a:	39 c0       	rjmp	.+114    	; 0x2ee <send_eeprom_data+0xc6>
		int buf_counter = 0;
		char temp;
	
		for (int i=0; i < data_length; i++)
		{
				temp			 = eeprom_read_byte((uint8_t*) (i + 2));
 27c:	c8 01       	movw	r24, r16
 27e:	02 96       	adiw	r24, 0x02	; 2
 280:	60 d3       	rcall	.+1728   	; 0x942 <eeprom_read_byte>
				if (temp == NEW_LINE)
 282:	8a 30       	cpi	r24, 0x0A	; 10
 284:	89 f4       	brne	.+34     	; 0x2a8 <send_eeprom_data+0x80>
				{
					buf[buf_counter] = temp;
 286:	e1 e0       	ldi	r30, 0x01	; 1
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	ec 0f       	add	r30, r28
 28c:	fd 1f       	adc	r31, r29
 28e:	ee 0d       	add	r30, r14
 290:	ff 1d       	adc	r31, r15
 292:	80 83       	st	Z, r24
					buf_counter		 = buf_counter + 1;
 294:	b7 01       	movw	r22, r14
 296:	6f 5f       	subi	r22, 0xFF	; 255
 298:	7f 4f       	sbci	r23, 0xFF	; 255
					UART_AddToQueue(buf, buf_counter, 0);
 29a:	40 e0       	ldi	r20, 0x00	; 0
 29c:	ce 01       	movw	r24, r28
 29e:	01 96       	adiw	r24, 0x01	; 1
 2a0:	ee d2       	rcall	.+1500   	; 0x87e <UART_AddToQueue>
					buf_counter		 = 0;
 2a2:	e1 2c       	mov	r14, r1
 2a4:	f1 2c       	mov	r15, r1
 2a6:	0a c0       	rjmp	.+20     	; 0x2bc <send_eeprom_data+0x94>
				}
				else
				{
					buf[buf_counter] = temp;
 2a8:	e1 e0       	ldi	r30, 0x01	; 1
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	ec 0f       	add	r30, r28
 2ae:	fd 1f       	adc	r31, r29
 2b0:	ee 0d       	add	r30, r14
 2b2:	ff 1d       	adc	r31, r15
 2b4:	80 83       	st	Z, r24
					buf_counter		 = buf_counter + 1;	
 2b6:	8f ef       	ldi	r24, 0xFF	; 255
 2b8:	e8 1a       	sub	r14, r24
 2ba:	f8 0a       	sbc	r15, r24
	{
		char buf[32];
		int buf_counter = 0;
		char temp;
	
		for (int i=0; i < data_length; i++)
 2bc:	0f 5f       	subi	r16, 0xFF	; 255
 2be:	1f 4f       	sbci	r17, 0xFF	; 255
 2c0:	04 c0       	rjmp	.+8      	; 0x2ca <send_eeprom_data+0xa2>
 2c2:	00 e0       	ldi	r16, 0x00	; 0
 2c4:	10 e0       	ldi	r17, 0x00	; 0
 2c6:	e1 2c       	mov	r14, r1
 2c8:	f1 2c       	mov	r15, r1
 2ca:	c8 01       	movw	r24, r16
 2cc:	01 2e       	mov	r0, r17
 2ce:	00 0c       	add	r0, r0
 2d0:	aa 0b       	sbc	r26, r26
 2d2:	bb 0b       	sbc	r27, r27
 2d4:	88 15       	cp	r24, r8
 2d6:	99 05       	cpc	r25, r9
 2d8:	aa 05       	cpc	r26, r10
 2da:	bb 05       	cpc	r27, r11
 2dc:	7c f2       	brlt	.-98     	; 0x27c <send_eeprom_data+0x54>
					buf_counter		 = buf_counter + 1;	
				}
		}
		
		
		if (buf_counter != 0)
 2de:	e1 14       	cp	r14, r1
 2e0:	f1 04       	cpc	r15, r1
 2e2:	29 f0       	breq	.+10     	; 0x2ee <send_eeprom_data+0xc6>
		{
			UART_AddToQueue(buf, buf_counter, 0);
 2e4:	40 e0       	ldi	r20, 0x00	; 0
 2e6:	b7 01       	movw	r22, r14
 2e8:	ce 01       	movw	r24, r28
 2ea:	01 96       	adiw	r24, 0x01	; 1
			buf_counter = 0;
		}
	}
	
	// Clear memory
	eeprom_write_byte((uint8_t*)0, 0);
 2ec:	c8 d2       	rcall	.+1424   	; 0x87e <UART_AddToQueue>
 2ee:	60 e0       	ldi	r22, 0x00	; 0
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	90 e0       	ldi	r25, 0x00	; 0
	eeprom_write_byte((uint8_t*)1, 0);
 2f4:	2e d3       	rcall	.+1628   	; 0x952 <eeprom_write_byte>
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	2a d3       	rcall	.+1620   	; 0x952 <eeprom_write_byte>
}
 2fe:	a0 96       	adiw	r28, 0x20	; 32
 300:	0f b6       	in	r0, 0x3f	; 63
 302:	f8 94       	cli
 304:	de bf       	out	0x3e, r29	; 62
 306:	0f be       	out	0x3f, r0	; 63
 308:	cd bf       	out	0x3d, r28	; 61
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	1f 91       	pop	r17
 310:	0f 91       	pop	r16
 312:	ff 90       	pop	r15
 314:	ef 90       	pop	r14
 316:	bf 90       	pop	r11
 318:	af 90       	pop	r10
 31a:	9f 90       	pop	r9
 31c:	8f 90       	pop	r8
 31e:	08 95       	ret

00000320 <main>:



int main(void)
{
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	cd b7       	in	r28, 0x3d	; 61
 326:	de b7       	in	r29, 0x3e	; 62
 328:	c0 54       	subi	r28, 0x40	; 64
 32a:	d1 09       	sbc	r29, r1
 32c:	0f b6       	in	r0, 0x3f	; 63
 32e:	f8 94       	cli
 330:	de bf       	out	0x3e, r29	; 62
 332:	0f be       	out	0x3f, r0	; 63
 334:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	data_addr = 0;
 336:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 33a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 33e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 342:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	USART_INIT();
 346:	aa d0       	rcall	.+340    	; 0x49c <USART_INIT>
	sei();
 348:	78 94       	sei
    while (1) 
    {
	
		if ((uart0_flags.UART_FLAG == DATA_RECEIVED_FLAG) || (uart0_flags.UART_FLAG == DATA_REQUEST_FLAG)) 
 34a:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <uart0_flags+0x1>
 34e:	82 30       	cpi	r24, 0x02	; 2
 350:	21 f0       	breq	.+8      	; 0x35a <main+0x3a>
 352:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <uart0_flags+0x1>
 356:	85 30       	cpi	r24, 0x05	; 5
 358:	59 f4       	brne	.+22     	; 0x370 <main+0x50>
		{			
			// Data was received -> need to save it to the EEPROM			
			if (uart0_flags.UART_FLAG == DATA_REQUEST_FLAG)
 35a:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <uart0_flags+0x1>
 35e:	85 30       	cpi	r24, 0x05	; 5
			{
				send_eeprom_data();
 360:	11 f4       	brne	.+4      	; 0x366 <main+0x46>
 362:	62 df       	rcall	.-316    	; 0x228 <send_eeprom_data>
			}
			
			else
			{				
				save_eeprom_data();	
 364:	01 c0       	rjmp	.+2      	; 0x368 <main+0x48>
			}			
			
			uart_set_RX_buf_len(0);
 366:	a3 de       	rcall	.-698    	; 0xae <save_eeprom_data>
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	9c d2       	rcall	.+1336   	; 0x8a4 <uart_set_RX_buf_len>
			uart0_flags.UART_FLAG = DATA_OPERATION_COMPLETE_FLAG;
 36c:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <uart0_flags+0x1>
		}
		
		if ((uart1_flags.UART_FLAG == DATA_RECEIVED_FLAG) || (uart1_flags.UART_FLAG == DATA_REQUEST_FLAG))
 370:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <uart1_flags+0x1>
 374:	82 30       	cpi	r24, 0x02	; 2
 376:	21 f0       	breq	.+8      	; 0x380 <main+0x60>
 378:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <uart1_flags+0x1>
 37c:	85 30       	cpi	r24, 0x05	; 5
 37e:	29 f7       	brne	.-54     	; 0x34a <main+0x2a>
		{
			// Data was received -> need to save it to the EEPROM
			if (uart1_flags.UART_FLAG == DATA_REQUEST_FLAG)
 380:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <uart1_flags+0x1>
 384:	85 30       	cpi	r24, 0x05	; 5
 386:	81 f4       	brne	.+32     	; 0x3a8 <main+0x88>
			{
				char buf[5];
				buf[0] = 'H';
 388:	88 e4       	ldi	r24, 0x48	; 72
 38a:	89 83       	std	Y+1, r24	; 0x01
				buf[1] = 'e';
 38c:	85 e6       	ldi	r24, 0x65	; 101
 38e:	8a 83       	std	Y+2, r24	; 0x02
				buf[2] = 'l';
 390:	8c e6       	ldi	r24, 0x6C	; 108
 392:	8b 83       	std	Y+3, r24	; 0x03
				buf[3] = 'l';
 394:	8c 83       	std	Y+4, r24	; 0x04
				buf[4] = 'o';
 396:	8f e6       	ldi	r24, 0x6F	; 111
 398:	8d 83       	std	Y+5, r24	; 0x05
				
				UART_AddToQueue(buf, 5, 0);				
 39a:	40 e0       	ldi	r20, 0x00	; 0
 39c:	65 e0       	ldi	r22, 0x05	; 5
 39e:	70 e0       	ldi	r23, 0x00	; 0
 3a0:	ce 01       	movw	r24, r28
 3a2:	01 96       	adiw	r24, 0x01	; 1
 3a4:	6c d2       	rcall	.+1240   	; 0x87e <UART_AddToQueue>
				unsigned char data[32];
				unsigned char buf [32];
				int buf_counter = 0;
				int len;
				
				len = uart_return_RX_buf(data, 1);				
 3a6:	3f c0       	rjmp	.+126    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 3a8:	61 e0       	ldi	r22, 0x01	; 1
 3aa:	ce 01       	movw	r24, r28
 3ac:	81 96       	adiw	r24, 0x21	; 33
 3ae:	7f d2       	rcall	.+1278   	; 0x8ae <uart_return_RX_buf>
 3b0:	7c 01       	movw	r14, r24
				data_addr = len;		
 3b2:	09 2e       	mov	r0, r25
 3b4:	00 0c       	add	r0, r0
 3b6:	aa 0b       	sbc	r26, r26
 3b8:	bb 0b       	sbc	r27, r27
 3ba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 3be:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3c2:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 3c6:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
						
				// Zero length of the buff
				uart_set_RX_buf_len(1);
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	6b d2       	rcall	.+1238   	; 0x8a4 <uart_set_RX_buf_len>
	
				// Add possibility to save to eeprom
				char temp;
				for (int i=0; i < len; i++)
 3ce:	00 e0       	ldi	r16, 0x00	; 0
 3d0:	10 e0       	ldi	r17, 0x00	; 0
						
			else
			{
				unsigned char data[32];
				unsigned char buf [32];
				int buf_counter = 0;
 3d2:	60 e0       	ldi	r22, 0x00	; 0
 3d4:	70 e0       	ldi	r23, 0x00	; 0
				// Zero length of the buff
				uart_set_RX_buf_len(1);
	
				// Add possibility to save to eeprom
				char temp;
				for (int i=0; i < len; i++)
 3d6:	24 c0       	rjmp	.+72     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
				{
					temp = data[i];
 3d8:	e1 e2       	ldi	r30, 0x21	; 33
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	ec 0f       	add	r30, r28
 3de:	fd 1f       	adc	r31, r29
 3e0:	e0 0f       	add	r30, r16
 3e2:	f1 1f       	adc	r31, r17
 3e4:	80 81       	ld	r24, Z
					if (temp == NEW_LINE)
 3e6:	8a 30       	cpi	r24, 0x0A	; 10
 3e8:	81 f4       	brne	.+32     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
					{
						buf[buf_counter] = temp;
 3ea:	e1 e0       	ldi	r30, 0x01	; 1
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	ec 0f       	add	r30, r28
 3f0:	fd 1f       	adc	r31, r29
 3f2:	e6 0f       	add	r30, r22
 3f4:	f7 1f       	adc	r31, r23
						buf_counter		 = buf_counter + 1;
 3f6:	80 83       	st	Z, r24
 3f8:	6f 5f       	subi	r22, 0xFF	; 255
						UART_AddToQueue(buf, buf_counter, 0);
 3fa:	7f 4f       	sbci	r23, 0xFF	; 255
 3fc:	40 e0       	ldi	r20, 0x00	; 0
 3fe:	ce 01       	movw	r24, r28
 400:	01 96       	adiw	r24, 0x01	; 1
 402:	3d d2       	rcall	.+1146   	; 0x87e <UART_AddToQueue>
						buf_counter		 = 0;
 404:	60 e0       	ldi	r22, 0x00	; 0
 406:	70 e0       	ldi	r23, 0x00	; 0
 408:	09 c0       	rjmp	.+18     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
					}
					else
					{
						buf[buf_counter] = temp;
 40a:	e1 e0       	ldi	r30, 0x01	; 1
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	ec 0f       	add	r30, r28
 410:	fd 1f       	adc	r31, r29
 412:	e6 0f       	add	r30, r22
 414:	f7 1f       	adc	r31, r23
 416:	80 83       	st	Z, r24
						buf_counter		 = buf_counter + 1;
 418:	6f 5f       	subi	r22, 0xFF	; 255
 41a:	7f 4f       	sbci	r23, 0xFF	; 255
				// Zero length of the buff
				uart_set_RX_buf_len(1);
	
				// Add possibility to save to eeprom
				char temp;
				for (int i=0; i < len; i++)
 41c:	0f 5f       	subi	r16, 0xFF	; 255
 41e:	1f 4f       	sbci	r17, 0xFF	; 255
 420:	0e 15       	cp	r16, r14
 422:	1f 05       	cpc	r17, r15
 424:	cc f2       	brlt	.-78     	; 0x3d8 <main+0xb8>
						buf_counter		 = buf_counter + 1;
					}
				}
			}
			
			uart1_flags.UART_FLAG = DATA_OPERATION_COMPLETE_FLAG;
 426:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <uart1_flags+0x1>
 42a:	8f cf       	rjmp	.-226    	; 0x34a <main+0x2a>

0000042c <uart_rx_data>:

int uart_return_RX_buf_len()
{
	int value = uart0_indexes.UART_IN_IDX; 
	return value;
}
 42c:	fc 01       	movw	r30, r24
 42e:	4d 30       	cpi	r20, 0x0D	; 13
 430:	41 f5       	brne	.+80     	; 0x482 <uart_rx_data+0x56>
 432:	81 81       	ldd	r24, Z+1	; 0x01
 434:	df 01       	movw	r26, r30
 436:	a8 0f       	add	r26, r24
 438:	b1 1d       	adc	r27, r1
 43a:	12 96       	adiw	r26, 0x02	; 2
 43c:	4c 93       	st	X, r20
 43e:	81 81       	ldd	r24, Z+1	; 0x01
 440:	8f 5f       	subi	r24, 0xFF	; 255
 442:	81 83       	std	Z+1, r24	; 0x01
 444:	81 81       	ldd	r24, Z+1	; 0x01
 446:	df 01       	movw	r26, r30
 448:	a8 0f       	add	r26, r24
 44a:	b1 1d       	adc	r27, r1
 44c:	8a e0       	ldi	r24, 0x0A	; 10
 44e:	12 96       	adiw	r26, 0x02	; 2
 450:	8c 93       	st	X, r24
 452:	81 81       	ldd	r24, Z+1	; 0x01
 454:	8f 5f       	subi	r24, 0xFF	; 255
 456:	81 83       	std	Z+1, r24	; 0x01
 458:	db 01       	movw	r26, r22
 45a:	1c 92       	st	X, r1
 45c:	82 e0       	ldi	r24, 0x02	; 2
 45e:	11 96       	adiw	r26, 0x01	; 1
 460:	8c 93       	st	X, r24
 462:	81 81       	ldd	r24, Z+1	; 0x01
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	df 01       	movw	r26, r30
 468:	ae 5b       	subi	r26, 0xBE	; 190
 46a:	bf 4f       	sbci	r27, 0xFF	; 255
 46c:	11 96       	adiw	r26, 0x01	; 1
 46e:	9c 93       	st	X, r25
 470:	8e 93       	st	-X, r24
 472:	11 82       	std	Z+1, r1	; 0x01
 474:	82 81       	ldd	r24, Z+2	; 0x02
 476:	86 32       	cpi	r24, 0x26	; 38
 478:	81 f4       	brne	.+32     	; 0x49a <uart_rx_data+0x6e>
 47a:	85 e0       	ldi	r24, 0x05	; 5
 47c:	fb 01       	movw	r30, r22
 47e:	81 83       	std	Z+1, r24	; 0x01
 480:	08 95       	ret
 482:	82 e0       	ldi	r24, 0x02	; 2
 484:	db 01       	movw	r26, r22
 486:	8c 93       	st	X, r24
 488:	81 81       	ldd	r24, Z+1	; 0x01
 48a:	df 01       	movw	r26, r30
 48c:	a8 0f       	add	r26, r24
 48e:	b1 1d       	adc	r27, r1
 490:	12 96       	adiw	r26, 0x02	; 2
 492:	4c 93       	st	X, r20
 494:	81 81       	ldd	r24, Z+1	; 0x01
 496:	8f 5f       	subi	r24, 0xFF	; 255
 498:	81 83       	std	Z+1, r24	; 0x01
 49a:	08 95       	ret

0000049c <USART_INIT>:
 49c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 4a0:	33 e3       	ldi	r19, 0x33	; 51
 4a2:	30 93 c4 00 	sts	0x00C4, r19	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 4a6:	22 e2       	ldi	r18, 0x22	; 34
 4a8:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 4ac:	98 e9       	ldi	r25, 0x98	; 152
 4ae:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 4b2:	86 e0       	ldi	r24, 0x06	; 6
 4b4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 4b8:	e4 e0       	ldi	r30, 0x04	; 4
 4ba:	f1 e0       	ldi	r31, 0x01	; 1
 4bc:	10 82       	st	Z, r1
 4be:	11 82       	std	Z+1, r1	; 0x01
 4c0:	ed e1       	ldi	r30, 0x1D	; 29
 4c2:	f2 e0       	ldi	r31, 0x02	; 2
 4c4:	10 82       	st	Z, r1
 4c6:	11 82       	std	Z+1, r1	; 0x01
 4c8:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <uart0_indexes+0x43>
 4cc:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <uart0_indexes+0x42>
 4d0:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <uart0_Queue+0x84>
 4d4:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <uart0_Queue+0x85>
 4d8:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <uart0_Queue+0x86>
 4dc:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <uart0_Queue+0x87>
 4e0:	e9 ed       	ldi	r30, 0xD9	; 217
 4e2:	f1 e0       	ldi	r31, 0x01	; 1
 4e4:	10 82       	st	Z, r1
 4e6:	11 82       	std	Z+1, r1	; 0x01
 4e8:	ec e4       	ldi	r30, 0x4C	; 76
 4ea:	f1 e0       	ldi	r31, 0x01	; 1
 4ec:	10 82       	st	Z, r1
 4ee:	11 82       	std	Z+1, r1	; 0x01
 4f0:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <uart1_indexes+0x43>
 4f4:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <uart1_indexes+0x42>
 4f8:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <uart1_Queue+0x84>
 4fc:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <uart1_Queue+0x85>
 500:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <uart1_Queue+0x86>
 504:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <uart1_Queue+0x87>
 508:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 50c:	30 93 cc 00 	sts	0x00CC, r19	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 510:	20 93 c8 00 	sts	0x00C8, r18	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 514:	90 93 c9 00 	sts	0x00C9, r25	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
 518:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
 51c:	08 95       	ret

0000051e <__vector_28>:
 51e:	1f 92       	push	r1
 520:	0f 92       	push	r0
 522:	0f b6       	in	r0, 0x3f	; 63
 524:	0f 92       	push	r0
 526:	11 24       	eor	r1, r1
 528:	0b b6       	in	r0, 0x3b	; 59
 52a:	0f 92       	push	r0
 52c:	2f 93       	push	r18
 52e:	3f 93       	push	r19
 530:	4f 93       	push	r20
 532:	5f 93       	push	r21
 534:	6f 93       	push	r22
 536:	7f 93       	push	r23
 538:	8f 93       	push	r24
 53a:	9f 93       	push	r25
 53c:	af 93       	push	r26
 53e:	bf 93       	push	r27
 540:	ef 93       	push	r30
 542:	ff 93       	push	r31
 544:	40 91 ce 00 	lds	r20, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 548:	6c e4       	ldi	r22, 0x4C	; 76
 54a:	71 e0       	ldi	r23, 0x01	; 1
 54c:	89 ed       	ldi	r24, 0xD9	; 217
 54e:	91 e0       	ldi	r25, 0x01	; 1
 550:	6d df       	rcall	.-294    	; 0x42c <uart_rx_data>
 552:	ff 91       	pop	r31
 554:	ef 91       	pop	r30
 556:	bf 91       	pop	r27
 558:	af 91       	pop	r26
 55a:	9f 91       	pop	r25
 55c:	8f 91       	pop	r24
 55e:	7f 91       	pop	r23
 560:	6f 91       	pop	r22
 562:	5f 91       	pop	r21
 564:	4f 91       	pop	r20
 566:	3f 91       	pop	r19
 568:	2f 91       	pop	r18
 56a:	0f 90       	pop	r0
 56c:	0b be       	out	0x3b, r0	; 59
 56e:	0f 90       	pop	r0
 570:	0f be       	out	0x3f, r0	; 63
 572:	0f 90       	pop	r0
 574:	1f 90       	pop	r1
 576:	18 95       	reti

00000578 <__vector_20>:
 578:	1f 92       	push	r1
 57a:	0f 92       	push	r0
 57c:	0f b6       	in	r0, 0x3f	; 63
 57e:	0f 92       	push	r0
 580:	11 24       	eor	r1, r1
 582:	0b b6       	in	r0, 0x3b	; 59
 584:	0f 92       	push	r0
 586:	2f 93       	push	r18
 588:	3f 93       	push	r19
 58a:	4f 93       	push	r20
 58c:	5f 93       	push	r21
 58e:	6f 93       	push	r22
 590:	7f 93       	push	r23
 592:	8f 93       	push	r24
 594:	9f 93       	push	r25
 596:	af 93       	push	r26
 598:	bf 93       	push	r27
 59a:	ef 93       	push	r30
 59c:	ff 93       	push	r31
 59e:	40 91 c6 00 	lds	r20, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 5a2:	6d e1       	ldi	r22, 0x1D	; 29
 5a4:	72 e0       	ldi	r23, 0x02	; 2
 5a6:	84 e0       	ldi	r24, 0x04	; 4
 5a8:	91 e0       	ldi	r25, 0x01	; 1
 5aa:	40 df       	rcall	.-384    	; 0x42c <uart_rx_data>
 5ac:	ff 91       	pop	r31
 5ae:	ef 91       	pop	r30
 5b0:	bf 91       	pop	r27
 5b2:	af 91       	pop	r26
 5b4:	9f 91       	pop	r25
 5b6:	8f 91       	pop	r24
 5b8:	7f 91       	pop	r23
 5ba:	6f 91       	pop	r22
 5bc:	5f 91       	pop	r21
 5be:	4f 91       	pop	r20
 5c0:	3f 91       	pop	r19
 5c2:	2f 91       	pop	r18
 5c4:	0f 90       	pop	r0
 5c6:	0b be       	out	0x3b, r0	; 59
 5c8:	0f 90       	pop	r0
 5ca:	0f be       	out	0x3f, r0	; 63
 5cc:	0f 90       	pop	r0
 5ce:	1f 90       	pop	r1
 5d0:	18 95       	reti

000005d2 <__vector_29>:
 5d2:	1f 92       	push	r1
 5d4:	0f 92       	push	r0
 5d6:	0f b6       	in	r0, 0x3f	; 63
 5d8:	0f 92       	push	r0
 5da:	11 24       	eor	r1, r1
 5dc:	0b b6       	in	r0, 0x3b	; 59
 5de:	0f 92       	push	r0
 5e0:	8f 93       	push	r24
 5e2:	9f 93       	push	r25
 5e4:	af 93       	push	r26
 5e6:	bf 93       	push	r27
 5e8:	ef 93       	push	r30
 5ea:	ff 93       	push	r31
 5ec:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <uart1_Queue+0x86>
 5f0:	e0 91 d5 01 	lds	r30, 0x01D5	; 0x8001d5 <uart1_Queue+0x85>
 5f4:	81 e2       	ldi	r24, 0x21	; 33
 5f6:	e8 9f       	mul	r30, r24
 5f8:	f0 01       	movw	r30, r0
 5fa:	11 24       	eor	r1, r1
 5fc:	e0 5b       	subi	r30, 0xB0	; 176
 5fe:	fe 4f       	sbci	r31, 0xFE	; 254
 600:	80 a1       	ldd	r24, Z+32	; 0x20
 602:	98 17       	cp	r25, r24
 604:	a0 f4       	brcc	.+40     	; 0x62e <__vector_29+0x5c>
 606:	e0 91 d5 01 	lds	r30, 0x01D5	; 0x8001d5 <uart1_Queue+0x85>
 60a:	a6 ed       	ldi	r26, 0xD6	; 214
 60c:	b1 e0       	ldi	r27, 0x01	; 1
 60e:	8c 91       	ld	r24, X
 610:	91 e0       	ldi	r25, 0x01	; 1
 612:	98 0f       	add	r25, r24
 614:	9c 93       	st	X, r25
 616:	91 e2       	ldi	r25, 0x21	; 33
 618:	e9 9f       	mul	r30, r25
 61a:	f0 01       	movw	r30, r0
 61c:	11 24       	eor	r1, r1
 61e:	e0 5b       	subi	r30, 0xB0	; 176
 620:	fe 4f       	sbci	r31, 0xFE	; 254
 622:	e8 0f       	add	r30, r24
 624:	f1 1d       	adc	r31, r1
 626:	80 81       	ld	r24, Z
 628:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 62c:	2c c0       	rjmp	.+88     	; 0x686 <__vector_29+0xb4>
 62e:	e5 ed       	ldi	r30, 0xD5	; 213
 630:	f1 e0       	ldi	r31, 0x01	; 1
 632:	80 81       	ld	r24, Z
 634:	8f 5f       	subi	r24, 0xFF	; 255
 636:	80 83       	st	Z, r24
 638:	80 81       	ld	r24, Z
 63a:	8f 71       	andi	r24, 0x1F	; 31
 63c:	80 83       	st	Z, r24
 63e:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <uart1_Queue+0x86>
 642:	90 81       	ld	r25, Z
 644:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <uart1_Queue+0x84>
 648:	98 13       	cpse	r25, r24
 64a:	0a c0       	rjmp	.+20     	; 0x660 <__vector_29+0x8e>
 64c:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <uart1_Queue+0x87>
 650:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <uart1_Queue+0x88>
 654:	e9 ec       	ldi	r30, 0xC9	; 201
 656:	f0 e0       	ldi	r31, 0x00	; 0
 658:	80 81       	ld	r24, Z
 65a:	8f 7d       	andi	r24, 0xDF	; 223
 65c:	80 83       	st	Z, r24
 65e:	13 c0       	rjmp	.+38     	; 0x686 <__vector_29+0xb4>
 660:	e0 91 d5 01 	lds	r30, 0x01D5	; 0x8001d5 <uart1_Queue+0x85>
 664:	a6 ed       	ldi	r26, 0xD6	; 214
 666:	b1 e0       	ldi	r27, 0x01	; 1
 668:	8c 91       	ld	r24, X
 66a:	91 e0       	ldi	r25, 0x01	; 1
 66c:	98 0f       	add	r25, r24
 66e:	9c 93       	st	X, r25
 670:	91 e2       	ldi	r25, 0x21	; 33
 672:	e9 9f       	mul	r30, r25
 674:	f0 01       	movw	r30, r0
 676:	11 24       	eor	r1, r1
 678:	e0 5b       	subi	r30, 0xB0	; 176
 67a:	fe 4f       	sbci	r31, 0xFE	; 254
 67c:	e8 0f       	add	r30, r24
 67e:	f1 1d       	adc	r31, r1
 680:	80 81       	ld	r24, Z
 682:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 686:	ff 91       	pop	r31
 688:	ef 91       	pop	r30
 68a:	bf 91       	pop	r27
 68c:	af 91       	pop	r26
 68e:	9f 91       	pop	r25
 690:	8f 91       	pop	r24
 692:	0f 90       	pop	r0
 694:	0b be       	out	0x3b, r0	; 59
 696:	0f 90       	pop	r0
 698:	0f be       	out	0x3f, r0	; 63
 69a:	0f 90       	pop	r0
 69c:	1f 90       	pop	r1
 69e:	18 95       	reti

000006a0 <__vector_21>:
 6a0:	1f 92       	push	r1
 6a2:	0f 92       	push	r0
 6a4:	0f b6       	in	r0, 0x3f	; 63
 6a6:	0f 92       	push	r0
 6a8:	11 24       	eor	r1, r1
 6aa:	0b b6       	in	r0, 0x3b	; 59
 6ac:	0f 92       	push	r0
 6ae:	8f 93       	push	r24
 6b0:	9f 93       	push	r25
 6b2:	af 93       	push	r26
 6b4:	bf 93       	push	r27
 6b6:	ef 93       	push	r30
 6b8:	ff 93       	push	r31
 6ba:	90 91 a5 02 	lds	r25, 0x02A5	; 0x8002a5 <uart0_Queue+0x86>
 6be:	e0 91 a4 02 	lds	r30, 0x02A4	; 0x8002a4 <uart0_Queue+0x85>
 6c2:	81 e2       	ldi	r24, 0x21	; 33
 6c4:	e8 9f       	mul	r30, r24
 6c6:	f0 01       	movw	r30, r0
 6c8:	11 24       	eor	r1, r1
 6ca:	e1 5e       	subi	r30, 0xE1	; 225
 6cc:	fd 4f       	sbci	r31, 0xFD	; 253
 6ce:	80 a1       	ldd	r24, Z+32	; 0x20
 6d0:	98 17       	cp	r25, r24
 6d2:	a0 f4       	brcc	.+40     	; 0x6fc <__vector_21+0x5c>
 6d4:	e0 91 a4 02 	lds	r30, 0x02A4	; 0x8002a4 <uart0_Queue+0x85>
 6d8:	a5 ea       	ldi	r26, 0xA5	; 165
 6da:	b2 e0       	ldi	r27, 0x02	; 2
 6dc:	8c 91       	ld	r24, X
 6de:	91 e0       	ldi	r25, 0x01	; 1
 6e0:	98 0f       	add	r25, r24
 6e2:	9c 93       	st	X, r25
 6e4:	91 e2       	ldi	r25, 0x21	; 33
 6e6:	e9 9f       	mul	r30, r25
 6e8:	f0 01       	movw	r30, r0
 6ea:	11 24       	eor	r1, r1
 6ec:	e1 5e       	subi	r30, 0xE1	; 225
 6ee:	fd 4f       	sbci	r31, 0xFD	; 253
 6f0:	e8 0f       	add	r30, r24
 6f2:	f1 1d       	adc	r31, r1
 6f4:	80 81       	ld	r24, Z
 6f6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 6fa:	2c c0       	rjmp	.+88     	; 0x754 <__vector_21+0xb4>
 6fc:	e4 ea       	ldi	r30, 0xA4	; 164
 6fe:	f2 e0       	ldi	r31, 0x02	; 2
 700:	80 81       	ld	r24, Z
 702:	8f 5f       	subi	r24, 0xFF	; 255
 704:	80 83       	st	Z, r24
 706:	80 81       	ld	r24, Z
 708:	8f 71       	andi	r24, 0x1F	; 31
 70a:	80 83       	st	Z, r24
 70c:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <uart0_Queue+0x86>
 710:	90 81       	ld	r25, Z
 712:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <uart0_Queue+0x84>
 716:	98 13       	cpse	r25, r24
 718:	0a c0       	rjmp	.+20     	; 0x72e <__vector_21+0x8e>
 71a:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <uart0_Queue+0x87>
 71e:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <uart0_Queue+0x88>
 722:	e1 ec       	ldi	r30, 0xC1	; 193
 724:	f0 e0       	ldi	r31, 0x00	; 0
 726:	80 81       	ld	r24, Z
 728:	8f 7d       	andi	r24, 0xDF	; 223
 72a:	80 83       	st	Z, r24
 72c:	13 c0       	rjmp	.+38     	; 0x754 <__vector_21+0xb4>
 72e:	e0 91 a4 02 	lds	r30, 0x02A4	; 0x8002a4 <uart0_Queue+0x85>
 732:	a5 ea       	ldi	r26, 0xA5	; 165
 734:	b2 e0       	ldi	r27, 0x02	; 2
 736:	8c 91       	ld	r24, X
 738:	91 e0       	ldi	r25, 0x01	; 1
 73a:	98 0f       	add	r25, r24
 73c:	9c 93       	st	X, r25
 73e:	91 e2       	ldi	r25, 0x21	; 33
 740:	e9 9f       	mul	r30, r25
 742:	f0 01       	movw	r30, r0
 744:	11 24       	eor	r1, r1
 746:	e1 5e       	subi	r30, 0xE1	; 225
 748:	fd 4f       	sbci	r31, 0xFD	; 253
 74a:	e8 0f       	add	r30, r24
 74c:	f1 1d       	adc	r31, r1
 74e:	80 81       	ld	r24, Z
 750:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 754:	ff 91       	pop	r31
 756:	ef 91       	pop	r30
 758:	bf 91       	pop	r27
 75a:	af 91       	pop	r26
 75c:	9f 91       	pop	r25
 75e:	8f 91       	pop	r24
 760:	0f 90       	pop	r0
 762:	0b be       	out	0x3b, r0	; 59
 764:	0f 90       	pop	r0
 766:	0f be       	out	0x3f, r0	; 63
 768:	0f 90       	pop	r0
 76a:	1f 90       	pop	r1
 76c:	18 95       	reti

0000076e <choose_uart>:
 76e:	cf 92       	push	r12
 770:	df 92       	push	r13
 772:	ef 92       	push	r14
 774:	ff 92       	push	r15
 776:	0f 93       	push	r16
 778:	cf 93       	push	r28
 77a:	df 93       	push	r29
 77c:	ec 01       	movw	r28, r24
 77e:	7a 01       	movw	r14, r20
 780:	f9 01       	movw	r30, r18
 782:	ec 57       	subi	r30, 0x7C	; 124
 784:	ff 4f       	sbci	r31, 0xFF	; 255
 786:	c0 80       	ld	r12, Z
 788:	d1 2c       	mov	r13, r1
 78a:	4f ef       	ldi	r20, 0xFF	; 255
 78c:	c4 1a       	sub	r12, r20
 78e:	d4 0a       	sbc	r13, r20
 790:	8f e1       	ldi	r24, 0x1F	; 31
 792:	c8 22       	and	r12, r24
 794:	dd 24       	eor	r13, r13
 796:	90 81       	ld	r25, Z
 798:	31 96       	adiw	r30, 0x01	; 1
 79a:	80 81       	ld	r24, Z
 79c:	98 17       	cp	r25, r24
 79e:	28 f4       	brcc	.+10     	; 0x7aa <choose_uart+0x3c>
 7a0:	80 81       	ld	r24, Z
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	c8 16       	cp	r12, r24
 7a6:	d9 06       	cpc	r13, r25
 7a8:	19 f0       	breq	.+6      	; 0x7b0 <choose_uart+0x42>
 7aa:	e0 e0       	ldi	r30, 0x00	; 0
 7ac:	f0 e0       	ldi	r31, 0x00	; 0
 7ae:	1e c0       	rjmp	.+60     	; 0x7ec <choose_uart+0x7e>
 7b0:	81 e0       	ldi	r24, 0x01	; 1
 7b2:	f9 01       	movw	r30, r18
 7b4:	e8 57       	subi	r30, 0x78	; 120
 7b6:	ff 4f       	sbci	r31, 0xFF	; 255
 7b8:	80 83       	st	Z, r24
 7ba:	f9 01       	movw	r30, r18
 7bc:	e8 57       	subi	r30, 0x78	; 120
 7be:	ff 4f       	sbci	r31, 0xFF	; 255
 7c0:	80 81       	ld	r24, Z
 7c2:	81 11       	cpse	r24, r1
 7c4:	fa cf       	rjmp	.-12     	; 0x7ba <choose_uart+0x4c>
 7c6:	f1 cf       	rjmp	.-30     	; 0x7aa <choose_uart+0x3c>
 7c8:	d9 01       	movw	r26, r18
 7ca:	ac 57       	subi	r26, 0x7C	; 124
 7cc:	bf 4f       	sbci	r27, 0xFF	; 255
 7ce:	5c 91       	ld	r21, X
 7d0:	de 01       	movw	r26, r28
 7d2:	ae 0f       	add	r26, r30
 7d4:	bf 1f       	adc	r27, r31
 7d6:	9c 91       	ld	r25, X
 7d8:	d9 01       	movw	r26, r18
 7da:	41 e2       	ldi	r20, 0x21	; 33
 7dc:	54 9f       	mul	r21, r20
 7de:	a0 0d       	add	r26, r0
 7e0:	b1 1d       	adc	r27, r1
 7e2:	11 24       	eor	r1, r1
 7e4:	ae 0f       	add	r26, r30
 7e6:	bf 1f       	adc	r27, r31
 7e8:	9c 93       	st	X, r25
 7ea:	31 96       	adiw	r30, 0x01	; 1
 7ec:	e6 17       	cp	r30, r22
 7ee:	f7 07       	cpc	r31, r23
 7f0:	58 f3       	brcs	.-42     	; 0x7c8 <choose_uart+0x5a>
 7f2:	f9 01       	movw	r30, r18
 7f4:	ec 57       	subi	r30, 0x7C	; 124
 7f6:	ff 4f       	sbci	r31, 0xFF	; 255
 7f8:	80 81       	ld	r24, Z
 7fa:	d9 01       	movw	r26, r18
 7fc:	91 e2       	ldi	r25, 0x21	; 33
 7fe:	89 9f       	mul	r24, r25
 800:	a0 0d       	add	r26, r0
 802:	b1 1d       	adc	r27, r1
 804:	11 24       	eor	r1, r1
 806:	90 96       	adiw	r26, 0x20	; 32
 808:	6c 93       	st	X, r22
 80a:	c0 82       	st	Z, r12
 80c:	33 96       	adiw	r30, 0x03	; 3
 80e:	80 81       	ld	r24, Z
 810:	81 11       	cpse	r24, r1
 812:	2d c0       	rjmp	.+90     	; 0x86e <choose_uart+0x100>
 814:	f7 01       	movw	r30, r14
 816:	80 81       	ld	r24, Z
 818:	81 11       	cpse	r24, r1
 81a:	29 c0       	rjmp	.+82     	; 0x86e <choose_uart+0x100>
 81c:	f9 01       	movw	r30, r18
 81e:	e9 57       	subi	r30, 0x79	; 121
 820:	ff 4f       	sbci	r31, 0xFF	; 255
 822:	81 e0       	ldi	r24, 0x01	; 1
 824:	80 83       	st	Z, r24
 826:	31 97       	sbiw	r30, 0x01	; 1
 828:	10 82       	st	Z, r1
 82a:	d9 01       	movw	r26, r18
 82c:	ab 57       	subi	r26, 0x7B	; 123
 82e:	bf 4f       	sbci	r27, 0xFF	; 255
 830:	9c 91       	ld	r25, X
 832:	80 81       	ld	r24, Z
 834:	41 e0       	ldi	r20, 0x01	; 1
 836:	48 0f       	add	r20, r24
 838:	40 83       	st	Z, r20
 83a:	f1 e2       	ldi	r31, 0x21	; 33
 83c:	9f 9f       	mul	r25, r31
 83e:	20 0d       	add	r18, r0
 840:	31 1d       	adc	r19, r1
 842:	11 24       	eor	r1, r1
 844:	f9 01       	movw	r30, r18
 846:	e8 0f       	add	r30, r24
 848:	f1 1d       	adc	r31, r1
 84a:	80 81       	ld	r24, Z
 84c:	01 11       	cpse	r16, r1
 84e:	08 c0       	rjmp	.+16     	; 0x860 <choose_uart+0xf2>
 850:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 854:	e1 ec       	ldi	r30, 0xC1	; 193
 856:	f0 e0       	ldi	r31, 0x00	; 0
 858:	80 81       	ld	r24, Z
 85a:	80 62       	ori	r24, 0x20	; 32
 85c:	80 83       	st	Z, r24
 85e:	07 c0       	rjmp	.+14     	; 0x86e <choose_uart+0x100>
 860:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 864:	e9 ec       	ldi	r30, 0xC9	; 201
 866:	f0 e0       	ldi	r31, 0x00	; 0
 868:	80 81       	ld	r24, Z
 86a:	80 62       	ori	r24, 0x20	; 32
 86c:	80 83       	st	Z, r24
 86e:	df 91       	pop	r29
 870:	cf 91       	pop	r28
 872:	0f 91       	pop	r16
 874:	ff 90       	pop	r15
 876:	ef 90       	pop	r14
 878:	df 90       	pop	r13
 87a:	cf 90       	pop	r12
 87c:	08 95       	ret

0000087e <UART_AddToQueue>:
 87e:	0f 93       	push	r16
 880:	41 11       	cpse	r20, r1
 882:	07 c0       	rjmp	.+14     	; 0x892 <UART_AddToQueue+0x14>
 884:	00 e0       	ldi	r16, 0x00	; 0
 886:	2f e1       	ldi	r18, 0x1F	; 31
 888:	32 e0       	ldi	r19, 0x02	; 2
 88a:	4d e1       	ldi	r20, 0x1D	; 29
 88c:	52 e0       	ldi	r21, 0x02	; 2
 88e:	6f df       	rcall	.-290    	; 0x76e <choose_uart>
 890:	06 c0       	rjmp	.+12     	; 0x89e <UART_AddToQueue+0x20>
 892:	01 e0       	ldi	r16, 0x01	; 1
 894:	20 e5       	ldi	r18, 0x50	; 80
 896:	31 e0       	ldi	r19, 0x01	; 1
 898:	4c e4       	ldi	r20, 0x4C	; 76
 89a:	51 e0       	ldi	r21, 0x01	; 1
 89c:	68 df       	rcall	.-304    	; 0x76e <choose_uart>
 89e:	81 e0       	ldi	r24, 0x01	; 1
 8a0:	0f 91       	pop	r16
 8a2:	08 95       	ret

000008a4 <uart_set_RX_buf_len>:
	}
	else
	{
		uart_indexes = uart1_indexes;
	}
	uart0_indexes.rx_msg_len = 0;
 8a4:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <uart0_indexes+0x43>
 8a8:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <uart0_indexes+0x42>
 8ac:	08 95       	ret

000008ae <uart_return_RX_buf>:
}

int uart_return_RX_buf(unsigned char* data, char uart_index)
{
 8ae:	0f 93       	push	r16
 8b0:	1f 93       	push	r17
 8b2:	cf 93       	push	r28
 8b4:	df 93       	push	r29
 8b6:	cd b7       	in	r28, 0x3d	; 61
 8b8:	de b7       	in	r29, 0x3e	; 62
 8ba:	c4 54       	subi	r28, 0x44	; 68
 8bc:	d1 09       	sbc	r29, r1
 8be:	0f b6       	in	r0, 0x3f	; 63
 8c0:	f8 94       	cli
 8c2:	de bf       	out	0x3e, r29	; 62
 8c4:	0f be       	out	0x3f, r0	; 63
 8c6:	cd bf       	out	0x3d, r28	; 61
 8c8:	8c 01       	movw	r16, r24
	Indexes uart_indexes;	
	if (uart_index == 0)
 8ca:	61 11       	cpse	r22, r1
 8cc:	0c c0       	rjmp	.+24     	; 0x8e6 <uart_return_RX_buf+0x38>
	{
		uart_indexes = uart0_indexes; 
 8ce:	84 e4       	ldi	r24, 0x44	; 68
 8d0:	e4 e0       	ldi	r30, 0x04	; 4
 8d2:	f1 e0       	ldi	r31, 0x01	; 1
 8d4:	de 01       	movw	r26, r28
 8d6:	11 96       	adiw	r26, 0x01	; 1
 8d8:	01 90       	ld	r0, Z+
 8da:	0d 92       	st	X+, r0
 8dc:	8a 95       	dec	r24
 8de:	e1 f7       	brne	.-8      	; 0x8d8 <uart_return_RX_buf+0x2a>
	}
	uart0_indexes.rx_msg_len = 0;
}

int uart_return_RX_buf(unsigned char* data, char uart_index)
{
 8e0:	20 e0       	ldi	r18, 0x00	; 0
 8e2:	30 e0       	ldi	r19, 0x00	; 0
 8e4:	17 c0       	rjmp	.+46     	; 0x914 <uart_return_RX_buf+0x66>
	{
		uart_indexes = uart0_indexes; 
	}
	else
	{
		uart_indexes = uart1_indexes;
 8e6:	84 e4       	ldi	r24, 0x44	; 68
 8e8:	e9 ed       	ldi	r30, 0xD9	; 217
 8ea:	f1 e0       	ldi	r31, 0x01	; 1
 8ec:	de 01       	movw	r26, r28
 8ee:	11 96       	adiw	r26, 0x01	; 1
 8f0:	01 90       	ld	r0, Z+
 8f2:	0d 92       	st	X+, r0
 8f4:	8a 95       	dec	r24
 8f6:	e1 f7       	brne	.-8      	; 0x8f0 <uart_return_RX_buf+0x42>
 8f8:	f3 cf       	rjmp	.-26     	; 0x8e0 <uart_return_RX_buf+0x32>
	}
	
	for (int i = 0; i < uart_indexes.rx_msg_len; i++) 
	{
		data[i] = uart_indexes.UART_RX_BUFFER[i]; 
 8fa:	d8 01       	movw	r26, r16
 8fc:	a2 0f       	add	r26, r18
 8fe:	b3 1f       	adc	r27, r19
 900:	e3 e0       	ldi	r30, 0x03	; 3
 902:	f0 e0       	ldi	r31, 0x00	; 0
 904:	ec 0f       	add	r30, r28
 906:	fd 1f       	adc	r31, r29
 908:	e2 0f       	add	r30, r18
 90a:	f3 1f       	adc	r31, r19
 90c:	90 81       	ld	r25, Z
 90e:	9c 93       	st	X, r25
	else
	{
		uart_indexes = uart1_indexes;
	}
	
	for (int i = 0; i < uart_indexes.rx_msg_len; i++) 
 910:	2f 5f       	subi	r18, 0xFF	; 255
 912:	3f 4f       	sbci	r19, 0xFF	; 255
 914:	25 96       	adiw	r28, 0x05	; 5
 916:	4e ad       	ldd	r20, Y+62	; 0x3e
 918:	5f ad       	ldd	r21, Y+63	; 0x3f
 91a:	25 97       	sbiw	r28, 0x05	; 5
 91c:	24 17       	cp	r18, r20
 91e:	35 07       	cpc	r19, r21
 920:	64 f3       	brlt	.-40     	; 0x8fa <uart_return_RX_buf+0x4c>
	{
		data[i] = uart_indexes.UART_RX_BUFFER[i]; 
	}
	return uart_indexes.rx_msg_len;
 922:	25 96       	adiw	r28, 0x05	; 5
 924:	8e ad       	ldd	r24, Y+62	; 0x3e
 926:	9f ad       	ldd	r25, Y+63	; 0x3f
 928:	25 97       	sbiw	r28, 0x05	; 5
 92a:	cc 5b       	subi	r28, 0xBC	; 188
 92c:	df 4f       	sbci	r29, 0xFF	; 255
 92e:	0f b6       	in	r0, 0x3f	; 63
 930:	f8 94       	cli
 932:	de bf       	out	0x3e, r29	; 62
 934:	0f be       	out	0x3f, r0	; 63
 936:	cd bf       	out	0x3d, r28	; 61
 938:	df 91       	pop	r29
 93a:	cf 91       	pop	r28
 93c:	1f 91       	pop	r17
 93e:	0f 91       	pop	r16
 940:	08 95       	ret

00000942 <eeprom_read_byte>:
 942:	f9 99       	sbic	0x1f, 1	; 31
 944:	fe cf       	rjmp	.-4      	; 0x942 <eeprom_read_byte>
 946:	92 bd       	out	0x22, r25	; 34
 948:	81 bd       	out	0x21, r24	; 33
 94a:	f8 9a       	sbi	0x1f, 0	; 31
 94c:	99 27       	eor	r25, r25
 94e:	80 b5       	in	r24, 0x20	; 32
 950:	08 95       	ret

00000952 <eeprom_write_byte>:
 952:	26 2f       	mov	r18, r22

00000954 <eeprom_write_r18>:
 954:	f9 99       	sbic	0x1f, 1	; 31
 956:	fe cf       	rjmp	.-4      	; 0x954 <eeprom_write_r18>
 958:	1f ba       	out	0x1f, r1	; 31
 95a:	92 bd       	out	0x22, r25	; 34
 95c:	81 bd       	out	0x21, r24	; 33
 95e:	20 bd       	out	0x20, r18	; 32
 960:	0f b6       	in	r0, 0x3f	; 63
 962:	f8 94       	cli
 964:	fa 9a       	sbi	0x1f, 2	; 31
 966:	f9 9a       	sbi	0x1f, 1	; 31
 968:	0f be       	out	0x3f, r0	; 63
 96a:	01 96       	adiw	r24, 0x01	; 1
 96c:	08 95       	ret

0000096e <_exit>:
 96e:	f8 94       	cli

00000970 <__stop_program>:
 970:	ff cf       	rjmp	.-2      	; 0x970 <__stop_program>
